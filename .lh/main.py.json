{
    "sourceFile": "main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 103,
            "patches": [
                {
                    "date": 1726553532392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726553546974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n \r\n-    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()a\r\n+    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n     while True:\r\n         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n"
                },
                {
                    "date": 1726554210261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,251 @@\n-import random  #for generating random nos\r\n-import sys     #for exit \r\n+# import random  #for generating random nos\r\n+# import sys     #for exit \r\n+# import pygame\r\n+# from   pygame.locals import *  #basic pygame imports\r\n+\r\n+# #global var\r\n+# FPS = 32\r\n+# SCREENWIDTH = 289\r\n+# SCREENHEIGHT = 511\r\n+# SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+# GROUNDY = SCREENHEIGHT * 0.8\r\n+# GAME_SPRITES = {}\r\n+# GAME_SOUNDS = {}\r\n+# #These 3 are separate becoz i want to make them global var \r\n+# PLAYER = 'gallery/sprites/bird.png'\r\n+# BACKGROUND = 'gallery/sprites/background.png'\r\n+# PIPE = 'gallery/sprites/pipe.png'\r\n+\r\n+# if __name__==\"__main__\":      #this will be main point from where game will start\r\n+    \r\n+#     pygame.init()             #ini pygame module\r\n+#     FPSCLOCK = pygame.time.Clock()    \r\n+#     pygame.display.set_caption('Flappy Bird by Sana')\r\n+#     GAME_SPRITES['numbers'] = (\r\n+#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+#     )\r\n+\r\n+#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+#     pygame.image.load(PIPE).convert_alpha()\r\n+#     )\r\n+#     #game sounds\r\n+\r\n+#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+\r\n+#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+\r\n+#     while True:\r\n+#         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+#         mainGame()       #this is the main game func\r\n+\r\n+import random # For generating random numbers\r\n+import sys # We will use sys.exit to exit the program\r\n import pygame\r\n-from   pygame.locals import *  #basic pygame imports\r\n+from pygame.locals import * # Basic pygame imports\r\n \r\n-#global var\r\n+# Global Variables for the game\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n-SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n-#These 3 are separate becoz i want to make them global var \r\n PLAYER = 'gallery/sprites/bird.png'\r\n BACKGROUND = 'gallery/sprites/background.png'\r\n PIPE = 'gallery/sprites/pipe.png'\r\n \r\n-if __name__==\"__main__\":      #this will be main point from where game will start\r\n+def welcomeScreen():\r\n+    \"\"\"\r\n+    Shows welcome images on the screen\r\n+    \"\"\"\r\n+\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagey = int(SCREENHEIGHT*0.13)\r\n+    basex = 0\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            # if user clicks on cross button, close the game\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+\r\n+            # If the user presses space or up key, start the game for them\r\n+            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                return\r\n+            else:\r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n+\r\n+def mainGame():\r\n+    score = 0\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int(SCREENWIDTH/2)\r\n+    basex = 0\r\n+\r\n+    # Create 2 pipes for blitting on the screen\r\n+    newPipe1 = getRandomPipe()\r\n+    newPipe2 = getRandomPipe()\r\n+\r\n+    # my List of upper pipes\r\n+    upperPipes = [\r\n+        {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},\r\n+    ]\r\n+    # my List of lower pipes\r\n+    lowerPipes = [\r\n+        {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},\r\n+    ]\r\n+\r\n+    pipeVelX = -4\r\n+\r\n+    playerVelY = -9\r\n+    playerMaxVelY = 10\r\n+    playerMinVelY = -8\r\n+    playerAccY = 1\r\n+\r\n+    playerFlapAccv = -8 # velocity while flapping\r\n+    playerFlapped = False # It is true only when the bird is flapping\r\n+\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n+                if playery > 0:\r\n+                    playerVelY = playerFlapAccv\r\n+                    playerFlapped = True\r\n+                    GAME_SOUNDS['wing'].play()\r\n+\r\n+\r\n+        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed\r\n+        if crashTest:\r\n+            return     \r\n+\r\n+        #check for score\r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+        for pipe in upperPipes:\r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos +4:\r\n+                score +=1\r\n+                print(f\"Your score is {score}\") \r\n+                GAME_SOUNDS['point'].play()\r\n+\r\n+\r\n+        if playerVelY <playerMaxVelY and not playerFlapped:\r\n+            playerVelY += playerAccY\r\n+\r\n+        if playerFlapped:\r\n+            playerFlapped = False            \r\n+        playerHeight = GAME_SPRITES['player'].get_height()\r\n+        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+\r\n+        # move pipes to the left\r\n+        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+            upperPipe['x'] += pipeVelX\r\n+            lowerPipe['x'] += pipeVelX\r\n+\r\n+        # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n+        if 0<upperPipes[0]['x']<5:\r\n+            newpipe = getRandomPipe()\r\n+            upperPipes.append(newpipe[0])\r\n+            lowerPipes.append(newpipe[1])\r\n+\r\n+        # if the pipe is out of the screen, remove it\r\n+        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+            upperPipes.pop(0)\r\n+            lowerPipes.pop(0)\r\n+        \r\n+        # Lets blit our sprites now\r\n+        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n+\r\n+        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+        myDigits = [int(x) for x in list(str(score))]\r\n+        width = 0\r\n+        for digit in myDigits:\r\n+            width += GAME_SPRITES['numbers'][digit].get_width()\r\n+        Xoffset = (SCREENWIDTH - width)/2\r\n+\r\n+        for digit in myDigits:\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))\r\n+            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+        pygame.display.update()\r\n+        FPSCLOCK.tick(FPS)\r\n+\r\n+def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n+    if playery> GROUNDY - 25  or playery<0:\r\n+        GAME_SOUNDS['hit'].play()\r\n+        return True\r\n     \r\n-    pygame.init()             #ini pygame module\r\n-    FPSCLOCK = pygame.time.Clock()    \r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n-    GAME_SPRITES['numbers'] = (\r\n+    for pipe in upperPipes:\r\n+        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+        if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n+\r\n+    for pipe in lowerPipes:\r\n+        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n+\r\n+    return False\r\n+\r\n+def getRandomPipe():\r\n+    \"\"\"\r\n+    Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen\r\n+    \"\"\"\r\n+    pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+    offset = SCREENHEIGHT/3\r\n+    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))\r\n+    pipeX = SCREENWIDTH + 10\r\n+    y1 = pipeHeight - y2 + offset\r\n+    pipe = [\r\n+        {'x': pipeX, 'y': -y1}, #upper Pipe\r\n+        {'x': pipeX, 'y': y2} #lower Pipe\r\n+    ]\r\n+    return pipe\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    # This will be the main point from where our game will start\r\n+    pygame.init() # Initialize all pygame's modules\r\n+    FPSCLOCK = pygame.time.Clock()\r\n+    pygame.display.set_caption('Flappy Bird by CodeWithHarry')\r\n+    GAME_SPRITES['numbers'] = ( \r\n         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n@@ -38,10 +261,10 @@\n     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n     pygame.image.load(PIPE).convert_alpha()\r\n     )\r\n-    #game sounds\r\n \r\n+    # Game sounds\r\n     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n@@ -50,8 +273,7 @@\n     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n     while True:\r\n-        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-        mainGame()       #this is the main game func\r\n+        welcomeScreen() # Shows welcome screen to the user until he presses a button\r\n+        mainGame() # This is the main game function \r\n \r\n-\r\n"
                },
                {
                    "date": 1726554543499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,13 +53,252 @@\n #     while True:\r\n #         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n #         mainGame()       #this is the main game func\r\n \r\n-import random # For generating random numbers\r\n-import sys # We will use sys.exit to exit the program\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+# import random # For generating random numbers\r\n+# import sys # We will use sys.exit to exit the program\r\n+# import pygame\r\n+# from pygame.locals import * # Basic pygame imports\r\n+\r\n+# # Global Variables for the game\r\n+# FPS = 32\r\n+# SCREENWIDTH = 289\r\n+# SCREENHEIGHT = 511\r\n+# SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))\r\n+# GROUNDY = SCREENHEIGHT * 0.8\r\n+# GAME_SPRITES = {}\r\n+# GAME_SOUNDS = {}\r\n+# PLAYER = 'gallery/sprites/bird.png'\r\n+# BACKGROUND = 'gallery/sprites/background.png'\r\n+# PIPE = 'gallery/sprites/pipe.png'\r\n+\r\n+# def welcomeScreen():\r\n+#     \"\"\"\r\n+#     Shows welcome images on the screen\r\n+#     \"\"\"\r\n+\r\n+#     playerx = int(SCREENWIDTH/5)\r\n+#     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+#     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+#     messagey = int(SCREENHEIGHT*0.13)\r\n+#     basex = 0\r\n+#     while True:\r\n+#         for event in pygame.event.get():\r\n+#             # if user clicks on cross button, close the game\r\n+#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+#                 pygame.quit()\r\n+#                 sys.exit()\r\n+\r\n+#             # If the user presses space or up key, start the game for them\r\n+#             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+#                 return\r\n+#             else:\r\n+#                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+#                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+#                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+#                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+#                 pygame.display.update()\r\n+#                 FPSCLOCK.tick(FPS)\r\n+\r\n+# def mainGame():\r\n+#     score = 0\r\n+#     playerx = int(SCREENWIDTH/5)\r\n+#     playery = int(SCREENWIDTH/2)\r\n+#     basex = 0\r\n+\r\n+#     # Create 2 pipes for blitting on the screen\r\n+#     newPipe1 = getRandomPipe()\r\n+#     newPipe2 = getRandomPipe()\r\n+\r\n+#     # my List of upper pipes\r\n+#     upperPipes = [\r\n+#         {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},\r\n+#         {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},\r\n+#     ]\r\n+#     # my List of lower pipes\r\n+#     lowerPipes = [\r\n+#         {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},\r\n+#         {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},\r\n+#     ]\r\n+\r\n+#     pipeVelX = -4\r\n+\r\n+#     playerVelY = -9\r\n+#     playerMaxVelY = 10\r\n+#     playerMinVelY = -8\r\n+#     playerAccY = 1\r\n+\r\n+#     playerFlapAccv = -8 # velocity while flapping\r\n+#     playerFlapped = False # It is true only when the bird is flapping\r\n+\r\n+\r\n+#     while True:\r\n+#         for event in pygame.event.get():\r\n+#             if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n+#                 pygame.quit()\r\n+#                 sys.exit()\r\n+#             if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n+#                 if playery > 0:\r\n+#                     playerVelY = playerFlapAccv\r\n+#                     playerFlapped = True\r\n+#                     GAME_SOUNDS['wing'].play()\r\n+\r\n+\r\n+#         crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed\r\n+#         if crashTest:\r\n+#             return     \r\n+\r\n+#         #check for score\r\n+#         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+#         for pipe in upperPipes:\r\n+#             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+#             if pipeMidPos<= playerMidPos < pipeMidPos +4:\r\n+#                 score +=1\r\n+#                 print(f\"Your score is {score}\") \r\n+#                 GAME_SOUNDS['point'].play()\r\n+\r\n+\r\n+#         if playerVelY <playerMaxVelY and not playerFlapped:\r\n+#             playerVelY += playerAccY\r\n+\r\n+#         if playerFlapped:\r\n+#             playerFlapped = False            \r\n+#         playerHeight = GAME_SPRITES['player'].get_height()\r\n+#         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+\r\n+#         # move pipes to the left\r\n+#         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+#             upperPipe['x'] += pipeVelX\r\n+#             lowerPipe['x'] += pipeVelX\r\n+\r\n+#         # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n+#         if 0<upperPipes[0]['x']<5:\r\n+#             newpipe = getRandomPipe()\r\n+#             upperPipes.append(newpipe[0])\r\n+#             lowerPipes.append(newpipe[1])\r\n+\r\n+#         # if the pipe is out of the screen, remove it\r\n+#         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+#             upperPipes.pop(0)\r\n+#             lowerPipes.pop(0)\r\n+        \r\n+#         # Lets blit our sprites now\r\n+#         SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+#         for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+#             SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n+#             SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n+\r\n+#         SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+#         SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+#         myDigits = [int(x) for x in list(str(score))]\r\n+#         width = 0\r\n+#         for digit in myDigits:\r\n+#             width += GAME_SPRITES['numbers'][digit].get_width()\r\n+#         Xoffset = (SCREENWIDTH - width)/2\r\n+\r\n+#         for digit in myDigits:\r\n+#             SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))\r\n+#             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+#         pygame.display.update()\r\n+#         FPSCLOCK.tick(FPS)\r\n+\r\n+# def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n+#     if playery> GROUNDY - 25  or playery<0:\r\n+#         GAME_SOUNDS['hit'].play()\r\n+#         return True\r\n+    \r\n+#     for pipe in upperPipes:\r\n+#         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+#         if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n+#             GAME_SOUNDS['hit'].play()\r\n+#             return True\r\n+\r\n+#     for pipe in lowerPipes:\r\n+#         if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+#             GAME_SOUNDS['hit'].play()\r\n+#             return True\r\n+\r\n+#     return False\r\n+\r\n+# def getRandomPipe():\r\n+#     \"\"\"\r\n+#     Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen\r\n+#     \"\"\"\r\n+#     pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+#     offset = SCREENHEIGHT/3\r\n+#     y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))\r\n+#     pipeX = SCREENWIDTH + 10\r\n+#     y1 = pipeHeight - y2 + offset\r\n+#     pipe = [\r\n+#         {'x': pipeX, 'y': -y1}, #upper Pipe\r\n+#         {'x': pipeX, 'y': y2} #lower Pipe\r\n+#     ]\r\n+#     return pipe\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+# if __name__ == \"__main__\":\r\n+#     # This will be the main point from where our game will start\r\n+#     pygame.init() # Initialize all pygame's modules\r\n+#     FPSCLOCK = pygame.time.Clock()\r\n+#     pygame.display.set_caption('Flappy Bird by CodeWithHarry')\r\n+#     GAME_SPRITES['numbers'] = ( \r\n+#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+#     )\r\n+\r\n+#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+#     pygame.image.load(PIPE).convert_alpha()\r\n+#     )\r\n+\r\n+#     # Game sounds\r\n+#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+\r\n+#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+\r\n+#     while True:\r\n+#         welcomeScreen() # Shows welcome screen to the user until he presses a button\r\n+#         mainGame() # This is the main game function \r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+import random\r\n+import sys\r\n import pygame\r\n-from pygame.locals import * # Basic pygame imports\r\n+from pygame.locals import *\r\n \r\n+# Initialize Pygame\r\n+pygame.init()\r\n+pygame.mixer.init()  # Initialize the mixer for sound\r\n+\r\n # Global Variables for the game\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n@@ -74,64 +313,60 @@\n def welcomeScreen():\r\n     \"\"\"\r\n     Shows welcome images on the screen\r\n     \"\"\"\r\n-\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-    messagey = int(SCREENHEIGHT*0.13)\r\n+    playerx = int(SCREENWIDTH / 5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height()) / 2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['msg'].get_width()) / 2)\r\n+    messagey = int(SCREENHEIGHT * 0.13)\r\n     basex = 0\r\n     while True:\r\n         for event in pygame.event.get():\r\n             # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n                 sys.exit()\r\n \r\n             # If the user presses space or up key, start the game for them\r\n-            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+            elif event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n                 return\r\n             else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+                SCREEN.blit(GAME_SPRITES['msg'], (messagex, messagey))\r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n def mainGame():\r\n     score = 0\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int(SCREENWIDTH/2)\r\n+    playerx = int(SCREENWIDTH / 5)\r\n+    playery = int(SCREENWIDTH / 2)\r\n     basex = 0\r\n \r\n     # Create 2 pipes for blitting on the screen\r\n     newPipe1 = getRandomPipe()\r\n     newPipe2 = getRandomPipe()\r\n \r\n-    # my List of upper pipes\r\n+    # List of upper pipes\r\n     upperPipes = [\r\n-        {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},\r\n+        {'x': SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH + 200 + (SCREENWIDTH / 2), 'y': newPipe2[0]['y']},\r\n     ]\r\n-    # my List of lower pipes\r\n+    # List of lower pipes\r\n     lowerPipes = [\r\n-        {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},\r\n+        {'x': SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH + 200 + (SCREENWIDTH / 2), 'y': newPipe2[1]['y']},\r\n     ]\r\n \r\n     pipeVelX = -4\r\n-\r\n     playerVelY = -9\r\n     playerMaxVelY = 10\r\n     playerMinVelY = -8\r\n     playerAccY = 1\r\n+    playerFlapAccv = -8  # velocity while flapping\r\n+    playerFlapped = False  # It is true only when the bird is flapping\r\n \r\n-    playerFlapAccv = -8 # velocity while flapping\r\n-    playerFlapped = False # It is true only when the bird is flapping\r\n-\r\n-\r\n     while True:\r\n         for event in pygame.event.get():\r\n             if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n@@ -141,48 +376,46 @@\n                     playerVelY = playerFlapAccv\r\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n \r\n-\r\n-        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed\r\n+        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes)  # Check for collision\r\n         if crashTest:\r\n-            return     \r\n+            return\r\n \r\n-        #check for score\r\n-        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+        # Check for score\r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width() / 2\r\n         for pipe in upperPipes:\r\n-            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-            if pipeMidPos<= playerMidPos < pipeMidPos +4:\r\n-                score +=1\r\n-                print(f\"Your score is {score}\") \r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width() / 2\r\n+            if pipeMidPos <= playerMidPos < pipeMidPos + 4:\r\n+                score += 1\r\n+                print(f\"Your score is {score}\")\r\n                 GAME_SOUNDS['point'].play()\r\n \r\n-\r\n-        if playerVelY <playerMaxVelY and not playerFlapped:\r\n+        if playerVelY < playerMaxVelY and not playerFlapped:\r\n             playerVelY += playerAccY\r\n \r\n         if playerFlapped:\r\n-            playerFlapped = False            \r\n+            playerFlapped = False\r\n         playerHeight = GAME_SPRITES['player'].get_height()\r\n         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n \r\n-        # move pipes to the left\r\n-        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+        # Move pipes to the left\r\n+        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n             upperPipe['x'] += pipeVelX\r\n             lowerPipe['x'] += pipeVelX\r\n \r\n         # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n-        if 0<upperPipes[0]['x']<5:\r\n+        if 0 < upperPipes[0]['x'] < 5:\r\n             newpipe = getRandomPipe()\r\n             upperPipes.append(newpipe[0])\r\n             lowerPipes.append(newpipe[1])\r\n \r\n-        # if the pipe is out of the screen, remove it\r\n+        # If the pipe is out of the screen, remove it\r\n         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n             upperPipes.pop(0)\r\n             lowerPipes.pop(0)\r\n-        \r\n-        # Lets blit our sprites now\r\n+\r\n+        # Blit our sprites now\r\n         SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n         for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n             SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n             SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n@@ -192,21 +425,21 @@\n         myDigits = [int(x) for x in list(str(score))]\r\n         width = 0\r\n         for digit in myDigits:\r\n             width += GAME_SPRITES['numbers'][digit].get_width()\r\n-        Xoffset = (SCREENWIDTH - width)/2\r\n+        Xoffset = (SCREENWIDTH - width) / 2\r\n \r\n         for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT * 0.12))\r\n             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n \r\n def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n-    if playery> GROUNDY - 25  or playery<0:\r\n+    if playery > GROUNDY - 25 or playery < 0:\r\n         GAME_SOUNDS['hit'].play()\r\n         return True\r\n-    \r\n+\r\n     for pipe in upperPipes:\r\n         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n         if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n             GAME_SOUNDS['hit'].play()\r\n@@ -220,32 +453,26 @@\n     return False\r\n \r\n def getRandomPipe():\r\n     \"\"\"\r\n-    Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen\r\n+    Generate positions of two pipes (one bottom straight and one top rotated) for blitting on the screen\r\n     \"\"\"\r\n     pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT/3\r\n-    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))\r\n+    offset = SCREENHEIGHT / 3\r\n+    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n     pipeX = SCREENWIDTH + 10\r\n     y1 = pipeHeight - y2 + offset\r\n     pipe = [\r\n-        {'x': pipeX, 'y': -y1}, #upper Pipe\r\n-        {'x': pipeX, 'y': y2} #lower Pipe\r\n+        {'x': pipeX, 'y': -y1},  # Upper Pipe\r\n+        {'x': pipeX, 'y': y2}  # Lower Pipe\r\n     ]\r\n     return pipe\r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n if __name__ == \"__main__\":\r\n-    # This will be the main point from where our game will start\r\n-    pygame.init() # Initialize all pygame's modules\r\n+    # Initialize all pygame's modules\r\n     FPSCLOCK = pygame.time.Clock()\r\n     pygame.display.set_caption('Flappy Bird by CodeWithHarry')\r\n-    GAME_SPRITES['numbers'] = ( \r\n+    GAME_SPRITES['numbers'] = (\r\n         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n@@ -256,24 +483,6 @@\n         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n     )\r\n \r\n-    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-    pygame.image.load(PIPE).convert_alpha()\r\n-    )\r\n-\r\n-    # Game sounds\r\n-    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-    while True:\r\n-        welcomeScreen() # Shows welcome screen to the user until he presses a button\r\n-        mainGame() # This is the main game function \r\n-\r\n+    GAME_SPRITES['msg'] = pygame.image.load('gallery/sprites/msg.png').convert_alpha()\r\n+    GAME_SPRITES['base'] =\r\n"
                },
                {
                    "date": 1726554654373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,12 +284,8 @@\n \r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n import random\r\n import sys\r\n import pygame\r\n from pygame.locals import *\r\n@@ -315,9 +311,9 @@\n     Shows welcome images on the screen\r\n     \"\"\"\r\n     playerx = int(SCREENWIDTH / 5)\r\n     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height()) / 2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['msg'].get_width()) / 2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width()) / 2)\r\n     messagey = int(SCREENHEIGHT * 0.13)\r\n     basex = 0\r\n     while True:\r\n         for event in pygame.event.get():\r\n@@ -331,9 +327,9 @@\n                 return\r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-                SCREEN.blit(GAME_SPRITES['msg'], (messagex, messagey))\r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex, messagey))\r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n@@ -483,6 +479,10 @@\n         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n     )\r\n \r\n-    GAME_SPRITES['msg'] = pygame.image.load('gallery/sprites/msg.png').convert_alpha()\r\n-    GAME_SPRITES['base'] =\r\n+    GAME_SPRITES['message'] = pygame.image.load('gallery/sprites/msg.png').convert_alpha()\r\n+    GAME_SPRITES['base'] = pygame.image.load('gallery/sprites/base.jfif').convert_alpha()\r\n+    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1726554690626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -479,9 +479,9 @@\n         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n     )\r\n \r\n-    GAME_SPRITES['message'] = pygame.image.load('gallery/sprites/msg.png').convert_alpha()\r\n+    GAME_SPRITES['message'] = pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n     GAME_SPRITES['base'] = pygame.image.load('gallery/sprites/base.jfif').convert_alpha()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha\r\n \r\n \r\n"
                },
                {
                    "date": 1726554722884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -480,9 +480,9 @@\n         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n     )\r\n \r\n     GAME_SPRITES['message'] = pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] = pygame.image.load('gallery/sprites/base.jfif').convert_alpha()\r\n+    GAME_SPRITES['base'] = pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1726554902521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,243 +58,13 @@\n \r\n \r\n \r\n \r\n-# import random # For generating random numbers\r\n-# import sys # We will use sys.exit to exit the program\r\n-# import pygame\r\n-# from pygame.locals import * # Basic pygame imports\r\n-\r\n-# # Global Variables for the game\r\n-# FPS = 32\r\n-# SCREENWIDTH = 289\r\n-# SCREENHEIGHT = 511\r\n-# SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))\r\n-# GROUNDY = SCREENHEIGHT * 0.8\r\n-# GAME_SPRITES = {}\r\n-# GAME_SOUNDS = {}\r\n-# PLAYER = 'gallery/sprites/bird.png'\r\n-# BACKGROUND = 'gallery/sprites/background.png'\r\n-# PIPE = 'gallery/sprites/pipe.png'\r\n-\r\n-# def welcomeScreen():\r\n-#     \"\"\"\r\n-#     Shows welcome images on the screen\r\n-#     \"\"\"\r\n-\r\n-#     playerx = int(SCREENWIDTH/5)\r\n-#     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-#     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-#     messagey = int(SCREENHEIGHT*0.13)\r\n-#     basex = 0\r\n-#     while True:\r\n-#         for event in pygame.event.get():\r\n-#             # if user clicks on cross button, close the game\r\n-#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-#                 pygame.quit()\r\n-#                 sys.exit()\r\n-\r\n-#             # If the user presses space or up key, start the game for them\r\n-#             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-#                 return\r\n-#             else:\r\n-#                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-#                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-#                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-#                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-#                 pygame.display.update()\r\n-#                 FPSCLOCK.tick(FPS)\r\n-\r\n-# def mainGame():\r\n-#     score = 0\r\n-#     playerx = int(SCREENWIDTH/5)\r\n-#     playery = int(SCREENWIDTH/2)\r\n-#     basex = 0\r\n-\r\n-#     # Create 2 pipes for blitting on the screen\r\n-#     newPipe1 = getRandomPipe()\r\n-#     newPipe2 = getRandomPipe()\r\n-\r\n-#     # my List of upper pipes\r\n-#     upperPipes = [\r\n-#         {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},\r\n-#         {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},\r\n-#     ]\r\n-#     # my List of lower pipes\r\n-#     lowerPipes = [\r\n-#         {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},\r\n-#         {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},\r\n-#     ]\r\n-\r\n-#     pipeVelX = -4\r\n-\r\n-#     playerVelY = -9\r\n-#     playerMaxVelY = 10\r\n-#     playerMinVelY = -8\r\n-#     playerAccY = 1\r\n-\r\n-#     playerFlapAccv = -8 # velocity while flapping\r\n-#     playerFlapped = False # It is true only when the bird is flapping\r\n-\r\n-\r\n-#     while True:\r\n-#         for event in pygame.event.get():\r\n-#             if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n-#                 pygame.quit()\r\n-#                 sys.exit()\r\n-#             if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n-#                 if playery > 0:\r\n-#                     playerVelY = playerFlapAccv\r\n-#                     playerFlapped = True\r\n-#                     GAME_SOUNDS['wing'].play()\r\n-\r\n-\r\n-#         crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed\r\n-#         if crashTest:\r\n-#             return     \r\n-\r\n-#         #check for score\r\n-#         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n-#         for pipe in upperPipes:\r\n-#             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-#             if pipeMidPos<= playerMidPos < pipeMidPos +4:\r\n-#                 score +=1\r\n-#                 print(f\"Your score is {score}\") \r\n-#                 GAME_SOUNDS['point'].play()\r\n-\r\n-\r\n-#         if playerVelY <playerMaxVelY and not playerFlapped:\r\n-#             playerVelY += playerAccY\r\n-\r\n-#         if playerFlapped:\r\n-#             playerFlapped = False            \r\n-#         playerHeight = GAME_SPRITES['player'].get_height()\r\n-#         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n-\r\n-#         # move pipes to the left\r\n-#         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n-#             upperPipe['x'] += pipeVelX\r\n-#             lowerPipe['x'] += pipeVelX\r\n-\r\n-#         # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n-#         if 0<upperPipes[0]['x']<5:\r\n-#             newpipe = getRandomPipe()\r\n-#             upperPipes.append(newpipe[0])\r\n-#             lowerPipes.append(newpipe[1])\r\n-\r\n-#         # if the pipe is out of the screen, remove it\r\n-#         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-#             upperPipes.pop(0)\r\n-#             lowerPipes.pop(0)\r\n-        \r\n-#         # Lets blit our sprites now\r\n-#         SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n-#         for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n-#             SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n-#             SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n-\r\n-#         SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n-#         SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-#         myDigits = [int(x) for x in list(str(score))]\r\n-#         width = 0\r\n-#         for digit in myDigits:\r\n-#             width += GAME_SPRITES['numbers'][digit].get_width()\r\n-#         Xoffset = (SCREENWIDTH - width)/2\r\n-\r\n-#         for digit in myDigits:\r\n-#             SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))\r\n-#             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-#         pygame.display.update()\r\n-#         FPSCLOCK.tick(FPS)\r\n-\r\n-# def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n-#     if playery> GROUNDY - 25  or playery<0:\r\n-#         GAME_SOUNDS['hit'].play()\r\n-#         return True\r\n-    \r\n-#     for pipe in upperPipes:\r\n-#         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-#         if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n-#             GAME_SOUNDS['hit'].play()\r\n-#             return True\r\n-\r\n-#     for pipe in lowerPipes:\r\n-#         if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-#             GAME_SOUNDS['hit'].play()\r\n-#             return True\r\n-\r\n-#     return False\r\n-\r\n-# def getRandomPipe():\r\n-#     \"\"\"\r\n-#     Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen\r\n-#     \"\"\"\r\n-#     pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-#     offset = SCREENHEIGHT/3\r\n-#     y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))\r\n-#     pipeX = SCREENWIDTH + 10\r\n-#     y1 = pipeHeight - y2 + offset\r\n-#     pipe = [\r\n-#         {'x': pipeX, 'y': -y1}, #upper Pipe\r\n-#         {'x': pipeX, 'y': y2} #lower Pipe\r\n-#     ]\r\n-#     return pipe\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-# if __name__ == \"__main__\":\r\n-#     # This will be the main point from where our game will start\r\n-#     pygame.init() # Initialize all pygame's modules\r\n-#     FPSCLOCK = pygame.time.Clock()\r\n-#     pygame.display.set_caption('Flappy Bird by CodeWithHarry')\r\n-#     GAME_SPRITES['numbers'] = ( \r\n-#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-#     )\r\n-\r\n-#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-#     pygame.image.load(PIPE).convert_alpha()\r\n-#     )\r\n-\r\n-#     # Game sounds\r\n-#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-#     while True:\r\n-#         welcomeScreen() # Shows welcome screen to the user until he presses a button\r\n-#         mainGame() # This is the main game function \r\n-\r\n-\r\n-\r\n-\r\n-import random\r\n-import sys\r\n+import random # For generating random numbers\r\n+import sys # We will use sys.exit to exit the program\r\n import pygame\r\n-from pygame.locals import *\r\n+from pygame.locals import * # Basic pygame imports\r\n \r\n-# Initialize Pygame\r\n-pygame.init()\r\n-pygame.mixer.init()  # Initialize the mixer for sound\r\n-\r\n # Global Variables for the game\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n@@ -309,60 +79,64 @@\n def welcomeScreen():\r\n     \"\"\"\r\n     Shows welcome images on the screen\r\n     \"\"\"\r\n-    playerx = int(SCREENWIDTH / 5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height()) / 2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width()) / 2)\r\n-    messagey = int(SCREENHEIGHT * 0.13)\r\n+\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagey = int(SCREENHEIGHT*0.13)\r\n     basex = 0\r\n     while True:\r\n         for event in pygame.event.get():\r\n             # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n                 sys.exit()\r\n \r\n             # If the user presses space or up key, start the game for them\r\n-            elif event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n+            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n             else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex, messagey))\r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n def mainGame():\r\n     score = 0\r\n-    playerx = int(SCREENWIDTH / 5)\r\n-    playery = int(SCREENWIDTH / 2)\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int(SCREENWIDTH/2)\r\n     basex = 0\r\n \r\n     # Create 2 pipes for blitting on the screen\r\n     newPipe1 = getRandomPipe()\r\n     newPipe2 = getRandomPipe()\r\n \r\n-    # List of upper pipes\r\n+    # my List of upper pipes\r\n     upperPipes = [\r\n-        {'x': SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200 + (SCREENWIDTH / 2), 'y': newPipe2[0]['y']},\r\n+        {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},\r\n     ]\r\n-    # List of lower pipes\r\n+    # my List of lower pipes\r\n     lowerPipes = [\r\n-        {'x': SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH + 200 + (SCREENWIDTH / 2), 'y': newPipe2[1]['y']},\r\n+        {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},\r\n     ]\r\n \r\n     pipeVelX = -4\r\n+\r\n     playerVelY = -9\r\n     playerMaxVelY = 10\r\n     playerMinVelY = -8\r\n     playerAccY = 1\r\n-    playerFlapAccv = -8  # velocity while flapping\r\n-    playerFlapped = False  # It is true only when the bird is flapping\r\n \r\n+    playerFlapAccv = -8 # velocity while flapping\r\n+    playerFlapped = False # It is true only when the bird is flapping\r\n+\r\n+\r\n     while True:\r\n         for event in pygame.event.get():\r\n             if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n@@ -372,46 +146,48 @@\n                     playerVelY = playerFlapAccv\r\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n \r\n-        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes)  # Check for collision\r\n+\r\n+        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed\r\n         if crashTest:\r\n-            return\r\n+            return     \r\n \r\n-        # Check for score\r\n-        playerMidPos = playerx + GAME_SPRITES['player'].get_width() / 2\r\n+        #check for score\r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n         for pipe in upperPipes:\r\n-            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width() / 2\r\n-            if pipeMidPos <= playerMidPos < pipeMidPos + 4:\r\n-                score += 1\r\n-                print(f\"Your score is {score}\")\r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos +4:\r\n+                score +=1\r\n+                print(f\"Your score is {score}\") \r\n                 GAME_SOUNDS['point'].play()\r\n \r\n-        if playerVelY < playerMaxVelY and not playerFlapped:\r\n+\r\n+        if playerVelY <playerMaxVelY and not playerFlapped:\r\n             playerVelY += playerAccY\r\n \r\n         if playerFlapped:\r\n-            playerFlapped = False\r\n+            playerFlapped = False            \r\n         playerHeight = GAME_SPRITES['player'].get_height()\r\n         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n \r\n-        # Move pipes to the left\r\n-        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+        # move pipes to the left\r\n+        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n             upperPipe['x'] += pipeVelX\r\n             lowerPipe['x'] += pipeVelX\r\n \r\n         # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n-        if 0 < upperPipes[0]['x'] < 5:\r\n+        if 0<upperPipes[0]['x']<5:\r\n             newpipe = getRandomPipe()\r\n             upperPipes.append(newpipe[0])\r\n             lowerPipes.append(newpipe[1])\r\n \r\n-        # If the pipe is out of the screen, remove it\r\n+        # if the pipe is out of the screen, remove it\r\n         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n             upperPipes.pop(0)\r\n             lowerPipes.pop(0)\r\n-\r\n-        # Blit our sprites now\r\n+        \r\n+        # Lets blit our sprites now\r\n         SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n         for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n             SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n             SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n@@ -421,21 +197,21 @@\n         myDigits = [int(x) for x in list(str(score))]\r\n         width = 0\r\n         for digit in myDigits:\r\n             width += GAME_SPRITES['numbers'][digit].get_width()\r\n-        Xoffset = (SCREENWIDTH - width) / 2\r\n+        Xoffset = (SCREENWIDTH - width)/2\r\n \r\n         for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT * 0.12))\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))\r\n             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n \r\n def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n-    if playery > GROUNDY - 25 or playery < 0:\r\n+    if playery> GROUNDY - 25  or playery<0:\r\n         GAME_SOUNDS['hit'].play()\r\n         return True\r\n-\r\n+    \r\n     for pipe in upperPipes:\r\n         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n         if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n             GAME_SOUNDS['hit'].play()\r\n@@ -449,26 +225,32 @@\n     return False\r\n \r\n def getRandomPipe():\r\n     \"\"\"\r\n-    Generate positions of two pipes (one bottom straight and one top rotated) for blitting on the screen\r\n+    Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen\r\n     \"\"\"\r\n     pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT / 3\r\n-    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    offset = SCREENHEIGHT/3\r\n+    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))\r\n     pipeX = SCREENWIDTH + 10\r\n     y1 = pipeHeight - y2 + offset\r\n     pipe = [\r\n-        {'x': pipeX, 'y': -y1},  # Upper Pipe\r\n-        {'x': pipeX, 'y': y2}  # Lower Pipe\r\n+        {'x': pipeX, 'y': -y1}, #upper Pipe\r\n+        {'x': pipeX, 'y': y2} #lower Pipe\r\n     ]\r\n     return pipe\r\n \r\n+\r\n+\r\n+\r\n+\r\n+\r\n if __name__ == \"__main__\":\r\n-    # Initialize all pygame's modules\r\n+    # This will be the main point from where our game will start\r\n+    pygame.init() # Initialize all pygame's modules\r\n     FPSCLOCK = pygame.time.Clock()\r\n     pygame.display.set_caption('Flappy Bird by CodeWithHarry')\r\n-    GAME_SPRITES['numbers'] = (\r\n+    GAME_SPRITES['numbers'] = ( \r\n         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n@@ -479,10 +261,27 @@\n         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n     )\r\n \r\n-    GAME_SPRITES['message'] = pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] = pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha\r\n+    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+    pygame.image.load(PIPE).convert_alpha()\r\n+    )\r\n \r\n+    # Game sounds\r\n+    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n \r\n+    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n+   def welcomeScreen():\r\n+    print(\"Welcome screen function called\")\r\n+    # Existing code...\r\n+\r\n+def mainGame():\r\n+    print(\"Main game function called\")\r\n+    # Existing code...\r\n"
                },
                {
                    "date": 1726554925837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n \r\n     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n-   def welcomeScreen():\r\n+def welcomeScreen():\r\n     print(\"Welcome screen function called\")\r\n     # Existing code...\r\n \r\n def mainGame():\r\n"
                },
                {
                    "date": 1726562269969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,256 +1,28 @@\n-# import random  #for generating random nos\r\n-# import sys     #for exit \r\n-# import pygame\r\n-# from   pygame.locals import *  #basic pygame imports\r\n-\r\n-# #global var\r\n-# FPS = 32\r\n-# SCREENWIDTH = 289\r\n-# SCREENHEIGHT = 511\r\n-# SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-# GROUNDY = SCREENHEIGHT * 0.8\r\n-# GAME_SPRITES = {}\r\n-# GAME_SOUNDS = {}\r\n-# #These 3 are separate becoz i want to make them global var \r\n-# PLAYER = 'gallery/sprites/bird.png'\r\n-# BACKGROUND = 'gallery/sprites/background.png'\r\n-# PIPE = 'gallery/sprites/pipe.png'\r\n-\r\n-# if __name__==\"__main__\":      #this will be main point from where game will start\r\n-    \r\n-#     pygame.init()             #ini pygame module\r\n-#     FPSCLOCK = pygame.time.Clock()    \r\n-#     pygame.display.set_caption('Flappy Bird by Sana')\r\n-#     GAME_SPRITES['numbers'] = (\r\n-#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-#     )\r\n-\r\n-#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-#     pygame.image.load(PIPE).convert_alpha()\r\n-#     )\r\n-#     #game sounds\r\n-\r\n-#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-#     while True:\r\n-#         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-#         mainGame()       #this is the main game func\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-import random # For generating random numbers\r\n-import sys # We will use sys.exit to exit the program\r\n+import random  #for generating random nos\r\n+import sys     #for exit \r\n import pygame\r\n-from pygame.locals import * # Basic pygame imports\r\n+from   pygame.locals import *  #basic pygame imports\r\n \r\n-# Global Variables for the game\r\n+#global var\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n-SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))\r\n+SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n+#These 3 are separate becoz i want to make them global var \r\n PLAYER = 'gallery/sprites/bird.png'\r\n BACKGROUND = 'gallery/sprites/background.png'\r\n PIPE = 'gallery/sprites/pipe.png'\r\n \r\n-def welcomeScreen():\r\n-    \"\"\"\r\n-    Shows welcome images on the screen\r\n-    \"\"\"\r\n-\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-    messagey = int(SCREENHEIGHT*0.13)\r\n-    basex = 0\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-\r\n-            # If the user presses space or up key, start the game for them\r\n-            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                return\r\n-            else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-                pygame.display.update()\r\n-                FPSCLOCK.tick(FPS)\r\n-\r\n-def mainGame():\r\n-    score = 0\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int(SCREENWIDTH/2)\r\n-    basex = 0\r\n-\r\n-    # Create 2 pipes for blitting on the screen\r\n-    newPipe1 = getRandomPipe()\r\n-    newPipe2 = getRandomPipe()\r\n-\r\n-    # my List of upper pipes\r\n-    upperPipes = [\r\n-        {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},\r\n-    ]\r\n-    # my List of lower pipes\r\n-    lowerPipes = [\r\n-        {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},\r\n-    ]\r\n-\r\n-    pipeVelX = -4\r\n-\r\n-    playerVelY = -9\r\n-    playerMaxVelY = 10\r\n-    playerMinVelY = -8\r\n-    playerAccY = 1\r\n-\r\n-    playerFlapAccv = -8 # velocity while flapping\r\n-    playerFlapped = False # It is true only when the bird is flapping\r\n-\r\n-\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n-                if playery > 0:\r\n-                    playerVelY = playerFlapAccv\r\n-                    playerFlapped = True\r\n-                    GAME_SOUNDS['wing'].play()\r\n-\r\n-\r\n-        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed\r\n-        if crashTest:\r\n-            return     \r\n-\r\n-        #check for score\r\n-        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n-        for pipe in upperPipes:\r\n-            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-            if pipeMidPos<= playerMidPos < pipeMidPos +4:\r\n-                score +=1\r\n-                print(f\"Your score is {score}\") \r\n-                GAME_SOUNDS['point'].play()\r\n-\r\n-\r\n-        if playerVelY <playerMaxVelY and not playerFlapped:\r\n-            playerVelY += playerAccY\r\n-\r\n-        if playerFlapped:\r\n-            playerFlapped = False            \r\n-        playerHeight = GAME_SPRITES['player'].get_height()\r\n-        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n-\r\n-        # move pipes to the left\r\n-        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n-            upperPipe['x'] += pipeVelX\r\n-            lowerPipe['x'] += pipeVelX\r\n-\r\n-        # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n-        if 0<upperPipes[0]['x']<5:\r\n-            newpipe = getRandomPipe()\r\n-            upperPipes.append(newpipe[0])\r\n-            lowerPipes.append(newpipe[1])\r\n-\r\n-        # if the pipe is out of the screen, remove it\r\n-        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-            upperPipes.pop(0)\r\n-            lowerPipes.pop(0)\r\n-        \r\n-        # Lets blit our sprites now\r\n-        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n-        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n-\r\n-        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-        myDigits = [int(x) for x in list(str(score))]\r\n-        width = 0\r\n-        for digit in myDigits:\r\n-            width += GAME_SPRITES['numbers'][digit].get_width()\r\n-        Xoffset = (SCREENWIDTH - width)/2\r\n-\r\n-        for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))\r\n-            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-        pygame.display.update()\r\n-        FPSCLOCK.tick(FPS)\r\n-\r\n-def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n-    if playery> GROUNDY - 25  or playery<0:\r\n-        GAME_SOUNDS['hit'].play()\r\n-        return True\r\n+if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n-    for pipe in upperPipes:\r\n-        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-        if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n-            GAME_SOUNDS['hit'].play()\r\n-            return True\r\n-\r\n-    for pipe in lowerPipes:\r\n-        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-            GAME_SOUNDS['hit'].play()\r\n-            return True\r\n-\r\n-    return False\r\n-\r\n-def getRandomPipe():\r\n-    \"\"\"\r\n-    Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen\r\n-    \"\"\"\r\n-    pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT/3\r\n-    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))\r\n-    pipeX = SCREENWIDTH + 10\r\n-    y1 = pipeHeight - y2 + offset\r\n-    pipe = [\r\n-        {'x': pipeX, 'y': -y1}, #upper Pipe\r\n-        {'x': pipeX, 'y': y2} #lower Pipe\r\n-    ]\r\n-    return pipe\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    # This will be the main point from where our game will start\r\n-    pygame.init() # Initialize all pygame's modules\r\n-    FPSCLOCK = pygame.time.Clock()\r\n-    pygame.display.set_caption('Flappy Bird by CodeWithHarry')\r\n-    GAME_SPRITES['numbers'] = ( \r\n+    pygame.init()             #ini pygame module\r\n+    FPSCLOCK = pygame.time.Clock()    \r\n+    pygame.display.set_caption('Flappy Bird by Sana')\r\n+    GAME_SPRITES['numbers'] = (\r\n         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n@@ -266,10 +38,10 @@\n     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n     pygame.image.load(PIPE).convert_alpha()\r\n     )\r\n+    #game sounds\r\n \r\n-    # Game sounds\r\n     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n@@ -277,11 +49,10 @@\n \r\n     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n-def welcomeScreen():\r\n-    print(\"Welcome screen function called\")\r\n-    # Existing code...\r\n+    while True:\r\n+        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+        mainGame()       #this is the main game func\r\n \r\n-def mainGame():\r\n-    print(\"Main game function called\")\r\n-    # Existing code...\r\n+\r\n+\r\n"
                },
                {
                    "date": 1726562325570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,15 @@\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n+\r\n #These 3 are separate becoz i want to make them global var \r\n PLAYER = 'gallery/sprites/bird.png'\r\n BACKGROUND = 'gallery/sprites/background.png'\r\n PIPE = 'gallery/sprites/pipe.png'\r\n \r\n+\r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n     pygame.init()             #ini pygame module\r\n     FPSCLOCK = pygame.time.Clock()    \r\n"
                },
                {
                    "date": 1726562426683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,38 @@\n BACKGROUND = 'gallery/sprites/background.png'\r\n PIPE = 'gallery/sprites/pipe.png'\r\n \r\n \r\n+def welcomeScreen():\r\n+    \"\"\"\r\n+    Shows welcome images on the screen\r\n+    \"\"\"\r\n+\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagey = int(SCREENHEIGHT*0.13)\r\n+    basex = 0\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            # if user clicks on cross button, close the game\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+\r\n+            # If the user presses space or up key, start the game for them\r\n+            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                return\r\n+            else:\r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n+\r\n+\r\n+\r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n     pygame.init()             #ini pygame module\r\n     FPSCLOCK = pygame.time.Clock()    \r\n"
                },
                {
                    "date": 1726562851220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,11 @@\n \r\n             # If the user presses space or up key, start the game for them\r\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n+\r\n+         # Clear the screen before drawing new images\r\n+        SCREEN.fill((0, 0, 0))  # Filling with black or any background color\r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n"
                },
                {
                    "date": 1726562908801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,15 +40,15 @@\n                 return\r\n \r\n          # Clear the screen before drawing new images\r\n         SCREEN.fill((0, 0, 0))  # Filling with black or any background color\r\n-            else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-                pygame.display.update()\r\n-                FPSCLOCK.tick(FPS)\r\n+            \r\n+        SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+        SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+        pygame.display.update()\r\n+        FPSCLOCK.tick(FPS)\r\n \r\n \r\n \r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n"
                },
                {
                    "date": 1726563481788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n     messagey = int(SCREENHEIGHT*0.13)\r\n     basex = 0\r\n+\r\n     while True:\r\n         for event in pygame.event.get():\r\n             # if user clicks on cross button, close the game\r\n             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n@@ -37,21 +38,19 @@\n \r\n             # If the user presses space or up key, start the game for them\r\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n+                \r\n+            else:\r\n+                # SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                # SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n \r\n-         # Clear the screen before drawing new images\r\n-        SCREEN.fill((0, 0, 0))  # Filling with black or any background color\r\n-            \r\n-        SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-        SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-        pygame.display.update()\r\n-        FPSCLOCK.tick(FPS)\r\n \r\n \r\n-\r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n     pygame.init()             #ini pygame module\r\n     FPSCLOCK = pygame.time.Clock()    \r\n"
                },
                {
                    "date": 1726566236755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,12 +40,12 @@\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n                 \r\n             else:\r\n-                # SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                # SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n \r\n"
                },
                {
                    "date": 1726566726940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,12 +40,12 @@\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n                 \r\n             else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                # SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                # SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n \r\n"
                },
                {
                    "date": 1726566973975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,18 +39,20 @@\n             # If the user presses space or up key, start the game for them\r\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n                 \r\n-            else:\r\n-                # SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                # SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-                pygame.display.update()\r\n-                FPSCLOCK.tick(FPS)\r\n+             # Clear the screen and draw the background\r\n+        SCREEN.blit(GAME_SPRITES['background'], (0, 0))  \r\n \r\n+            # Draw the player and message images  \r\n+        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+        SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+        pygame.display.update()\r\n+        FPSCLOCK.tick(FPS)\r\n \r\n \r\n+\r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n     pygame.init()             #ini pygame module\r\n     FPSCLOCK = pygame.time.Clock()    \r\n"
                },
                {
                    "date": 1726567245335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n+SCREENWIDTH = 1000\r\n+SCREENHEIGHT = 1500\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726567285302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 1000\r\n-SCREENHEIGHT = 1500\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726567351262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,20 +39,18 @@\n             # If the user presses space or up key, start the game for them\r\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n                 \r\n-             # Clear the screen and draw the background\r\n-        SCREEN.blit(GAME_SPRITES['background'], (0, 0))  \r\n+            else:\r\n+                # SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                # SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n \r\n-            # Draw the player and message images  \r\n-        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-        SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-        pygame.display.update()\r\n-        FPSCLOCK.tick(FPS)\r\n \r\n \r\n-\r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n     pygame.init()             #ini pygame module\r\n     FPSCLOCK = pygame.time.Clock()    \r\n"
                },
                {
                    "date": 1726567360052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n+SCREENWIDTH = 1000\r\n+SCREENHEIGHT = 1500\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726567379648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 1000\r\n-SCREENHEIGHT = 1500\r\n+SCREENWIDTH = 300\r\n+SCREENHEIGHT = 700\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726567398685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 300\r\n+SCREENWIDTH = 800\r\n SCREENHEIGHT = 700\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n"
                },
                {
                    "date": 1726567419539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 800\r\n-SCREENHEIGHT = 700\r\n+SCREENWIDTH = 500\r\n+SCREENHEIGHT = 500\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726567429478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n #global var\r\n FPS = 32\r\n SCREENWIDTH = 500\r\n-SCREENHEIGHT = 500\r\n+SCREENHEIGHT = 700\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726567457411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,12 +40,12 @@\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n                 \r\n             else:\r\n-                # SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                # SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n \r\n"
                },
                {
                    "date": 1726567670093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,12 +40,12 @@\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n                 \r\n             else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                # SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                # SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n \r\n"
                },
                {
                    "date": 1726567726803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 500\r\n-SCREENHEIGHT = 700\r\n+SCREENWIDTH = 281\r\n+SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726567745003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 281\r\n-SCREENHEIGHT = 511\r\n+SCREENWIDTH = 1000\r\n+SCREENHEIGHT = 1500\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726568101466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 1000\r\n-SCREENHEIGHT = 1500\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726568114952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n #global var\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n+SCREENHEIGHT = 500\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726568134590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n #global var\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n-SCREENHEIGHT = 500\r\n+SCREENHEIGHT = 400\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726568150086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n #global var\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n-SCREENHEIGHT = 400\r\n+SCREENHEIGHT = 600\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726568166980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 289\r\n+SCREENWIDTH = 300\r\n SCREENHEIGHT = 600\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n"
                },
                {
                    "date": 1726568209155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 300\r\n-SCREENHEIGHT = 600\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726568450586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n+SCREENWIDTH = 280\r\n+SCREENHEIGHT = 300\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726568462639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n from   pygame.locals import *  #basic pygame imports\r\n \r\n #global var\r\n FPS = 32\r\n-SCREENWIDTH = 280\r\n-SCREENHEIGHT = 300\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726571239561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,12 +40,12 @@\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n                 \r\n             else:\r\n-                # SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                # SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n \r\n"
                },
                {
                    "date": 1726571255798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726571482947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726571519725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726571539451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726571802421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726572078671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726572437087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,10 @@\n     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n     pygame.image.load(PIPE).convert_alpha()\r\n     )\r\n+\r\n+    \r\n     #game sounds\r\n \r\n     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n"
                },
                {
                    "date": 1726572473551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,15 +67,15 @@\n         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n     )\r\n \r\n-    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    # GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n     pygame.image.load(PIPE).convert_alpha()\r\n     )\r\n \r\n-    \r\n+\r\n     #game sounds\r\n \r\n     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n"
                },
                {
                    "date": 1726572490142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726572509425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n     )\r\n \r\n-    # GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n     pygame.image.load(PIPE).convert_alpha()\r\n     )\r\n"
                },
                {
                    "date": 1726572572419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     \"\"\"\r\n \r\n     playerx = int(SCREENWIDTH/5)\r\n     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width()))\r\n     messagey = int(SCREENHEIGHT*0.13)\r\n     basex = 0\r\n \r\n     while True:\r\n"
                },
                {
                    "date": 1726572581252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726572628235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     \"\"\"\r\n \r\n     playerx = int(SCREENWIDTH/5)\r\n     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width()))\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n     messagey = int(SCREENHEIGHT*0.13)\r\n     basex = 0\r\n \r\n     while True:\r\n"
                },
                {
                    "date": 1726573077711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,13 @@\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n+def mainGame():\r\n+    score = 0\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int(SCREENWIDTH/2)\r\n+    basex = 0\r\n \r\n \r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n"
                },
                {
                    "date": 1726573673899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import random  #for generating random nos\r\n+import sys     #for exit \r\n+import pygame\r\n+from   pygame.locals import *  #basic pygame imports\r\n+\r\n+#global var\r\n+FPS = 32\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n+SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+GROUNDY = SCREENHEIGHT * 0.8\r\n+GAME_SPRITES = {}\r\n+GAME_SOUNDS = {}\r\n+\r\n+#These 3 are separate becoz i want to make them global var \r\n+PLAYER = 'gallery/sprites/bird.png'\r\n+BACKGROUND = 'gallery/sprites/background.png'\r\n+PIPE = 'gallery/sprites/pipe.png'\r\n+\r\n+\r\n+def welcomeScreen():\r\n+    \"\"\"\r\n+    Shows welcome images on the screen\r\n+    \"\"\"\r\n+\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagey = int(SCREENHEIGHT*0.13)\r\n+    basex = 0\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            # if user clicks on cross button, close the game\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+\r\n+            # If the user presses space or up key, start the game for them\r\n+            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                return\r\n+                \r\n+            else:\r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n+\r\n+def mainGame():\r\n+    score = 0\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int(SCREENWIDTH/2)\r\n+    basex = 0\r\n+\r\n+\r\n+if __name__==\"__main__\":      #this will be main point from where game will start\r\n+    \r\n+    pygame.init()             #ini pygame module\r\n+    FPSCLOCK = pygame.time.Clock()    \r\n+    pygame.display.set_caption('Flappy Bird by Sana')\r\n+    GAME_SPRITES['numbers'] = (\r\n+        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+    )\r\n+\r\n+    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+    pygame.image.load(PIPE).convert_alpha()\r\n+    )\r\n+\r\n+\r\n+    #game sounds\r\n+\r\n+    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+\r\n+    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+\r\n+    while True:\r\n+        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+        mainGame()       #this is the main game func\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1726573683281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,103 +96,4 @@\n         mainGame()       #this is the main game func\r\n \r\n \r\n \r\n-import random  #for generating random nos\r\n-import sys     #for exit \r\n-import pygame\r\n-from   pygame.locals import *  #basic pygame imports\r\n-\r\n-#global var\r\n-FPS = 32\r\n-SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n-SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.8\r\n-GAME_SPRITES = {}\r\n-GAME_SOUNDS = {}\r\n-\r\n-#These 3 are separate becoz i want to make them global var \r\n-PLAYER = 'gallery/sprites/bird.png'\r\n-BACKGROUND = 'gallery/sprites/background.png'\r\n-PIPE = 'gallery/sprites/pipe.png'\r\n-\r\n-\r\n-def welcomeScreen():\r\n-    \"\"\"\r\n-    Shows welcome images on the screen\r\n-    \"\"\"\r\n-\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-    messagey = int(SCREENHEIGHT*0.13)\r\n-    basex = 0\r\n-\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-\r\n-            # If the user presses space or up key, start the game for them\r\n-            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                return\r\n-                \r\n-            else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-                pygame.display.update()\r\n-                FPSCLOCK.tick(FPS)\r\n-\r\n-def mainGame():\r\n-    score = 0\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int(SCREENWIDTH/2)\r\n-    basex = 0\r\n-\r\n-\r\n-if __name__==\"__main__\":      #this will be main point from where game will start\r\n-    \r\n-    pygame.init()             #ini pygame module\r\n-    FPSCLOCK = pygame.time.Clock()    \r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n-    GAME_SPRITES['numbers'] = (\r\n-        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-    )\r\n-\r\n-    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-    pygame.image.load(PIPE).convert_alpha()\r\n-    )\r\n-\r\n-\r\n-    #game sounds\r\n-\r\n-    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-    while True:\r\n-        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-        mainGame()       #this is the main game func\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1726574134464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n #global var\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n+SCREENHEIGHT = 400\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726574146132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n #global var\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n-SCREENHEIGHT = 400\r\n+SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n"
                },
                {
                    "date": 1726574170597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726574190456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                 \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                # SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n"
                },
                {
                    "date": 1726574287118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.8\r\n+GROUNDY = SCREENHEIGHT * 0.10\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n \r\n #These 3 are separate becoz i want to make them global var \r\n"
                },
                {
                    "date": 1726574304961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.10\r\n+GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n \r\n #These 3 are separate becoz i want to make them global var \r\n"
                },
                {
                    "date": 1726574315890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.8\r\n+GROUNDY = SCREENHEIGHT * 0.5\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n \r\n #These 3 are separate becoz i want to make them global var \r\n"
                },
                {
                    "date": 1726574326680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.5\r\n+GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n \r\n #These 3 are separate becoz i want to make them global var \r\n"
                },
                {
                    "date": 1726633615525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,13 @@\n     score = 0\r\n     playerx = int(SCREENWIDTH/5)\r\n     playery = int(SCREENWIDTH/2)\r\n     basex = 0\r\n+    \r\n+    \r\n \r\n \r\n+\r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n     pygame.init()             #ini pygame module\r\n     FPSCLOCK = pygame.time.Clock()    \r\n"
                },
                {
                    "date": 1726634565687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n     playery = int(SCREENWIDTH/2)\r\n     basex = 0\r\n     \r\n     \r\n+    \r\n \r\n \r\n \r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n"
                },
                {
                    "date": 1726635587501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,29 @@\n     score = 0\r\n     playerx = int(SCREENWIDTH/5)\r\n     playery = int(SCREENWIDTH/2)\r\n     basex = 0\r\n+\r\n+    #create 2 pipes for blitting on screen \r\n+\r\n+    newPipe1 = getRandomPipe()\r\n+    newPipe2 = getRandomPipe()\r\n+\r\n+def RandomPipe():\r\n+    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n+    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+    offset = SCREENHEIGHT/3\r\n+    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    pipeX = SCREENWIDTH + 10\r\n+    y1 = pipeheight - y2 + offset\r\n+    pipe = [\r\n+        {'x':pipeX, 'y':-y1}   #upper pipe\r\n+        {'x':pipeX, 'y':y2}    #lower pipe\r\n+\r\n+        ]\r\n+    return pipe    \r\n     \r\n     \r\n-    \r\n \r\n \r\n \r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n"
                },
                {
                    "date": 1726635890602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,17 +58,32 @@\n \r\n     newPipe1 = getRandomPipe()\r\n     newPipe2 = getRandomPipe()\r\n \r\n+    # my list of upper and lower pipes\r\n+\r\n+    upperPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0][''y]},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+    ]\r\n+\r\n+     lowerPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0][''y]},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+    ]\r\n+\r\n+\r\n+\r\n+\r\n def RandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n     y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n     pipeX = SCREENWIDTH + 10\r\n     y1 = pipeheight - y2 + offset\r\n     pipe = [\r\n-        {'x':pipeX, 'y':-y1}   #upper pipe\r\n+        {'x':pipeX, 'y':-y1},   #upper pipe\r\n         {'x':pipeX, 'y':y2}    #lower pipe\r\n \r\n         ]\r\n     return pipe    \r\n"
                },
                {
                    "date": 1726636007085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,11 +70,18 @@\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0][''y]},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n     ]\r\n \r\n+    pipeVelX = -4\r\n \r\n+    playerVelY = -9\r\n+    playerMaxVelY = 10\r\n+    playerMinVelY = -8\r\n+    playerAccY = 1\r\n \r\n \r\n+\r\n+\r\n def RandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n"
                },
                {
                    "date": 1726636673683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,39 @@\n     playerMaxVelY = 10\r\n     playerMinVelY = -8\r\n     playerAccY = 1\r\n \r\n+    playerFlapAccv = -8     #velocity while flapping\r\n+    playerFlapped = False  # it is true only when bird is flapping \r\n \r\n \r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                if playery > 0 :\r\n+                    playerVelY = playerFlapAccv\r\n+                    playerFlapped = True\r\n+                    GAME_SOUNDS['wing'].play()\r\n+        \r\n+        crashTest = isCollide(playerx,playery,uppePipes,lowerPipes):   #this func will return true is u are crashed \r\n+        if crashTest :\r\n+            return\r\n+        #check for score \r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+        for pipe in upperPipes:\r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+                score +=1\r\n+                print(f\"Your score is {score}\")\r\n+                \r\n \r\n+        \r\n+\r\n+\r\n+\r\n def RandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n"
                },
                {
                    "date": 1726636703718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,14 +61,14 @@\n \r\n     # my list of upper and lower pipes\r\n \r\n     upperPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[0][''y]},\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n     ]\r\n \r\n      lowerPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[0][''y]},\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n     ]\r\n \r\n     pipeVelX = -4\r\n@@ -102,10 +102,10 @@\n             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n             if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n                 score +=1\r\n                 print(f\"Your score is {score}\")\r\n-                \r\n \r\n+\r\n         \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1726636727846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n \r\n      lowerPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-    ]\r\n+        ]\r\n \r\n     pipeVelX = -4\r\n \r\n     playerVelY = -9\r\n"
                },
                {
                    "date": 1726636734321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \r\n     upperPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-    ]\r\n+       ]\r\n \r\n      lowerPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n"
                },
                {
                    "date": 1726636781968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,14 +63,14 @@\n \r\n     upperPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-       ]\r\n+    ]\r\n \r\n      lowerPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-        ]\r\n+    ]\r\n \r\n     pipeVelX = -4\r\n \r\n     playerVelY = -9\r\n"
                },
                {
                    "date": 1726636836712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n     ]\r\n \r\n-     lowerPipes = [\r\n+    lowerPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n     ]\r\n \r\n"
                },
                {
                    "date": 1726637202310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n                     playerVelY = playerFlapAccv\r\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n         \r\n-        crashTest = isCollide(playerx,playery,uppePipes,lowerPipes):   #this func will return true is u are crashed \r\n+        crashTest = isCollide(playerx,playery,uppePipes,lowerPipes)   #this func will return true is u are crashed \r\n         if crashTest :\r\n             return\r\n         #check for score \r\n         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n@@ -102,14 +102,13 @@\n             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n             if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n                 score +=1\r\n                 print(f\"Your score is {score}\")\r\n+                GAME_SOUNDS['point'].play()\r\n \r\n \r\n         \r\n \r\n-\r\n-\r\n def RandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n"
                },
                {
                    "date": 1726638831811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,11 +104,41 @@\n                 score +=1\r\n                 print(f\"Your score is {score}\")\r\n                 GAME_SOUNDS['point'].play()\r\n \r\n+        if playerVelY < playerMaxVelY and not playerFlapped:\r\n+            playerVelY += playerAccY\r\n+        \r\n+        if playerFlapped:\r\n+            playerFlapped = False\r\n+        playerHeight =  GAME_SPRITES['player'].get_height()\r\n+        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+        \r\n+        #move pipes to the left\r\n+        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+            upperPipe['x'] += pipeVelX\r\n+            lowerPipe['x'] += pipeVelX\r\n \r\n+        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+        if 0< upperPipes[0]['x']<5\r\n+        newpipe = getRandomPipe()\r\n+        upperPipes.append(newpipe[0])\r\n+        lowerPipes.append(newpipe[1])\r\n+ \r\n+        # if the pipe is out of the screen , remove it \r\n+        if upperPipes[0]['x'] < -GAME_SPITES['pipe'][0].get_width():\r\n+            upperPipes.pop(0)\r\n+            lowerPipes.pop(0)\r\n         \r\n+        #lets blit our sprites \r\n+        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n+        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n+            upperPipe['x'] += pipeVelX\r\n+            lowerPipe['x'] += pipeVelX\r\n+        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n \r\n+\r\n def RandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n"
                },
                {
                    "date": 1726649565337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,10 +131,11 @@\n         \r\n         #lets blit our sprites \r\n         SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n         for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-            upperPipe['x'] += pipeVelX\r\n-            lowerPipe['x'] += pipeVelX\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n+            \r\n         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n \r\n \r\n"
                },
                {
                    "date": 1726649597955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n             upperPipe['x'] += pipeVelX\r\n             lowerPipe['x'] += pipeVelX\r\n \r\n         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n-        if 0< upperPipes[0]['x']<5\r\n+        if 0 < upperPipes[0]['x'] < 5:\r\n         newpipe = getRandomPipe()\r\n         upperPipes.append(newpipe[0])\r\n         lowerPipes.append(newpipe[1])\r\n  \r\n@@ -133,9 +133,9 @@\n         SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n         for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n             SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n             SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n-            \r\n+\r\n         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n \r\n \r\n"
                },
                {
                    "date": 1726649633810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,11 +119,11 @@\n             lowerPipe['x'] += pipeVelX\r\n \r\n         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n         if 0 < upperPipes[0]['x'] < 5:\r\n-        newpipe = getRandomPipe()\r\n-        upperPipes.append(newpipe[0])\r\n-        lowerPipes.append(newpipe[1])\r\n+          newpipe = getRandomPipe()\r\n+          upperPipes.append(newpipe[0])\r\n+          lowerPipes.append(newpipe[1])\r\n  \r\n         # if the pipe is out of the screen , remove it \r\n         if upperPipes[0]['x'] < -GAME_SPITES['pipe'][0].get_width():\r\n             upperPipes.pop(0)\r\n"
                },
                {
                    "date": 1726650190671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,10 +136,24 @@\n             SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n \r\n         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+        myDigits = [int(x) for x in list(str(score))]\r\n+        width = 0\r\n+        for digit in myDigits:\r\n+            width += GAME_SPRITES['numbers'][digit].get_width()\r\n+        Xoffset = (SCREENWIDTH - width)/2\r\n \r\n+        for digit in myDigist:\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+        pygame.display.update()\r\n+        FPSCLOCK.tick(FPS)\r\n \r\n+def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n+    return False  \r\n+\r\n+\r\n def RandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n"
                },
                {
                    "date": 1726650683566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n           upperPipes.append(newpipe[0])\r\n           lowerPipes.append(newpipe[1])\r\n  \r\n         # if the pipe is out of the screen , remove it \r\n-        if upperPipes[0]['x'] < -GAME_SPITES['pipe'][0].get_width():\r\n+        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n             upperPipes.pop(0)\r\n             lowerPipes.pop(0)\r\n         \r\n         #lets blit our sprites \r\n@@ -142,9 +142,9 @@\n         for digit in myDigits:\r\n             width += GAME_SPRITES['numbers'][digit].get_width()\r\n         Xoffset = (SCREENWIDTH - width)/2\r\n \r\n-        for digit in myDigist:\r\n+        for digit in myDigits:\r\n             SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n@@ -152,9 +152,9 @@\n def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n     return False  \r\n \r\n \r\n-def RandomPipe():\r\n+def getRandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n     y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n"
                },
                {
                    "date": 1726650747633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n                     playerVelY = playerFlapAccv\r\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n         \r\n-        crashTest = isCollide(playerx,playery,uppePipes,lowerPipes)   #this func will return true is u are crashed \r\n+        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n         if crashTest :\r\n             return\r\n         #check for score \r\n         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n"
                },
                {
                    "date": 1726651585512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n         \r\n         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n-        if crashTest :\r\n+         if crashTest :\r\n             return\r\n         #check for score \r\n         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n         for pipe in upperPipes:\r\n"
                },
                {
                    "date": 1726651623881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n         \r\n         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n-         if crashTest :\r\n+        if crashTest:\r\n             return\r\n         #check for score \r\n         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n         for pipe in upperPipes:\r\n"
                },
                {
                    "date": 1726653474445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n                 if playery > 0 :\r\n                     playerVelY = playerFlapAccv\r\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n-        \r\n+         \r\n         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n         if crashTest:\r\n             return\r\n         #check for score \r\n"
                },
                {
                    "date": 1726653520830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,234 @@\n-import random  #for generating random nos\r\n-import sys     #for exit \r\n+# import random  #for generating random nos\r\n+# import sys     #for exit \r\n+# import pygame\r\n+# from   pygame.locals import *  #basic pygame imports\r\n+\r\n+# #global var\r\n+# FPS = 32\r\n+# SCREENWIDTH = 289\r\n+# SCREENHEIGHT = 511\r\n+# SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+# GROUNDY = SCREENHEIGHT * 0.8\r\n+# GAME_SPRITES = {}\r\n+# GAME_SOUNDS = {}\r\n+\r\n+# #These 3 are separate becoz i want to make them global var \r\n+# PLAYER = 'gallery/sprites/bird.png'\r\n+# BACKGROUND = 'gallery/sprites/background.png'\r\n+# PIPE = 'gallery/sprites/pipe.png'\r\n+\r\n+\r\n+# def welcomeScreen():\r\n+#     \"\"\"\r\n+#     Shows welcome images on the screen\r\n+#     \"\"\"\r\n+\r\n+#     playerx = int(SCREENWIDTH/5)\r\n+#     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+#     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+#     messagey = int(SCREENHEIGHT*0.13)\r\n+#     basex = 0\r\n+\r\n+#     while True:\r\n+#         for event in pygame.event.get():\r\n+#             # if user clicks on cross button, close the game\r\n+#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+#                 pygame.quit()\r\n+#                 sys.exit()\r\n+\r\n+#             # If the user presses space or up key, start the game for them\r\n+#             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+#                 return\r\n+                \r\n+#             else:\r\n+#                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+#                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+#                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+#                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+#                 pygame.display.update()\r\n+#                 FPSCLOCK.tick(FPS)\r\n+\r\n+# def mainGame():\r\n+#     score = 0\r\n+#     playerx = int(SCREENWIDTH/5)\r\n+#     playery = int(SCREENWIDTH/2)\r\n+#     basex = 0\r\n+\r\n+#     #create 2 pipes for blitting on screen \r\n+\r\n+#     newPipe1 = getRandomPipe()\r\n+#     newPipe2 = getRandomPipe()\r\n+\r\n+#     # my list of upper and lower pipes\r\n+\r\n+#     upperPipes = [\r\n+#         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+#     ]\r\n+\r\n+#     lowerPipes = [\r\n+#         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+#     ]\r\n+\r\n+#     pipeVelX = -4\r\n+\r\n+#     playerVelY = -9\r\n+#     playerMaxVelY = 10\r\n+#     playerMinVelY = -8\r\n+#     playerAccY = 1\r\n+\r\n+#     playerFlapAccv = -8     #velocity while flapping\r\n+#     playerFlapped = False  # it is true only when bird is flapping \r\n+\r\n+\r\n+#     while True:\r\n+#         for event in pygame.event.get():\r\n+#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+#                 pygame.quit()\r\n+#                 sys.exit()\r\n+#             if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+#                 if playery > 0 :\r\n+#                     playerVelY = playerFlapAccv\r\n+#                     playerFlapped = True\r\n+#                     GAME_SOUNDS['wing'].play()\r\n+         \r\n+#         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+#         if crashTest:\r\n+#             return\r\n+#         #check for score \r\n+#         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+#         for pipe in upperPipes:\r\n+#             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+#             if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+#                 score +=1\r\n+#                 print(f\"Your score is {score}\")\r\n+#                 GAME_SOUNDS['point'].play()\r\n+\r\n+#         if playerVelY < playerMaxVelY and not playerFlapped:\r\n+#             playerVelY += playerAccY\r\n+        \r\n+#         if playerFlapped:\r\n+#             playerFlapped = False\r\n+#         playerHeight =  GAME_SPRITES['player'].get_height()\r\n+#         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+        \r\n+#         #move pipes to the left\r\n+#         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+#             upperPipe['x'] += pipeVelX\r\n+#             lowerPipe['x'] += pipeVelX\r\n+\r\n+#         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+#         if 0 < upperPipes[0]['x'] < 5:\r\n+#           newpipe = getRandomPipe()\r\n+#           upperPipes.append(newpipe[0])\r\n+#           lowerPipes.append(newpipe[1])\r\n+ \r\n+#         # if the pipe is out of the screen , remove it \r\n+#         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+#             upperPipes.pop(0)\r\n+#             lowerPipes.pop(0)\r\n+        \r\n+#         #lets blit our sprites \r\n+#         SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n+#         for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n+#             SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n+#             SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n+\r\n+#         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n+#         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+#         myDigits = [int(x) for x in list(str(score))]\r\n+#         width = 0\r\n+#         for digit in myDigits:\r\n+#             width += GAME_SPRITES['numbers'][digit].get_width()\r\n+#         Xoffset = (SCREENWIDTH - width)/2\r\n+\r\n+#         for digit in myDigits:\r\n+#             SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+#             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+#         pygame.display.update()\r\n+#         FPSCLOCK.tick(FPS)\r\n+\r\n+# def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n+#     return False  \r\n+\r\n+\r\n+# def getRandomPipe():\r\n+#     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n+#     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+#     offset = SCREENHEIGHT/3\r\n+#     y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+#     pipeX = SCREENWIDTH + 10\r\n+#     y1 = pipeheight - y2 + offset\r\n+#     pipe = [\r\n+#         {'x':pipeX, 'y':-y1},   #upper pipe\r\n+#         {'x':pipeX, 'y':y2}    #lower pipe\r\n+\r\n+#         ]\r\n+#     return pipe    \r\n+    \r\n+    \r\n+\r\n+\r\n+\r\n+# if __name__==\"__main__\":      #this will be main point from where game will start\r\n+    \r\n+#     pygame.init()             #ini pygame module\r\n+#     FPSCLOCK = pygame.time.Clock()    \r\n+#     pygame.display.set_caption('Flappy Bird by Sana')\r\n+#     GAME_SPRITES['numbers'] = (\r\n+#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+#     )\r\n+\r\n+#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+#     pygame.image.load(PIPE).convert_alpha()\r\n+#     )\r\n+\r\n+\r\n+#     #game sounds\r\n+\r\n+#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+\r\n+#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+\r\n+#     while True:\r\n+#         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+#         mainGame()       #this is the main game func\r\n+\r\n+import random # For generating random numbers\r\n+import sys # We will use sys.exit to exit the program\r\n import pygame\r\n-from   pygame.locals import *  #basic pygame imports\r\n+from pygame.locals import * # Basic pygame imports\r\n \r\n-#global var\r\n+# Global Variables for the game\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n-SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n-\r\n-#These 3 are separate becoz i want to make them global var \r\n PLAYER = 'gallery/sprites/bird.png'\r\n BACKGROUND = 'gallery/sprites/background.png'\r\n PIPE = 'gallery/sprites/pipe.png'\r\n \r\n-\r\n def welcomeScreen():\r\n     \"\"\"\r\n     Shows welcome images on the screen\r\n     \"\"\"\r\n@@ -27,9 +237,8 @@\n     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n     messagey = int(SCREENHEIGHT*0.13)\r\n     basex = 0\r\n-\r\n     while True:\r\n         for event in pygame.event.get():\r\n             # if user clicks on cross button, close the game\r\n             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n@@ -38,9 +247,8 @@\n \r\n             # If the user presses space or up key, start the game for them\r\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n-                \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n@@ -53,23 +261,21 @@\n     playerx = int(SCREENWIDTH/5)\r\n     playery = int(SCREENWIDTH/2)\r\n     basex = 0\r\n \r\n-    #create 2 pipes for blitting on screen \r\n-\r\n+    # Create 2 pipes for blitting on the screen\r\n     newPipe1 = getRandomPipe()\r\n     newPipe2 = getRandomPipe()\r\n \r\n-    # my list of upper and lower pipes\r\n-\r\n+    # my List of upper pipes\r\n     upperPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+        {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},\r\n     ]\r\n-\r\n+    # my List of lower pipes\r\n     lowerPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+        {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},\r\n     ]\r\n \r\n     pipeVelX = -4\r\n \r\n@@ -77,107 +283,126 @@\n     playerMaxVelY = 10\r\n     playerMinVelY = -8\r\n     playerAccY = 1\r\n \r\n-    playerFlapAccv = -8     #velocity while flapping\r\n-    playerFlapped = False  # it is true only when bird is flapping \r\n+    playerFlapAccv = -8 # velocity while flapping\r\n+    playerFlapped = False # It is true only when the bird is flapping\r\n \r\n \r\n     while True:\r\n         for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n                 sys.exit()\r\n-            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                if playery > 0 :\r\n+            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n+                if playery > 0:\r\n                     playerVelY = playerFlapAccv\r\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n-         \r\n-        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+\r\n+\r\n+        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed\r\n         if crashTest:\r\n-            return\r\n-        #check for score \r\n+            return     \r\n+\r\n+        #check for score\r\n         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n         for pipe in upperPipes:\r\n             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos +4:\r\n                 score +=1\r\n-                print(f\"Your score is {score}\")\r\n+                print(f\"Your score is {score}\") \r\n                 GAME_SOUNDS['point'].play()\r\n \r\n-        if playerVelY < playerMaxVelY and not playerFlapped:\r\n+\r\n+        if playerVelY <playerMaxVelY and not playerFlapped:\r\n             playerVelY += playerAccY\r\n-        \r\n+\r\n         if playerFlapped:\r\n-            playerFlapped = False\r\n-        playerHeight =  GAME_SPRITES['player'].get_height()\r\n+            playerFlapped = False            \r\n+        playerHeight = GAME_SPRITES['player'].get_height()\r\n         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n-        \r\n-        #move pipes to the left\r\n+\r\n+        # move pipes to the left\r\n         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n             upperPipe['x'] += pipeVelX\r\n             lowerPipe['x'] += pipeVelX\r\n \r\n-        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n-        if 0 < upperPipes[0]['x'] < 5:\r\n-          newpipe = getRandomPipe()\r\n-          upperPipes.append(newpipe[0])\r\n-          lowerPipes.append(newpipe[1])\r\n- \r\n-        # if the pipe is out of the screen , remove it \r\n+        # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n+        if 0<upperPipes[0]['x']<5:\r\n+            newpipe = getRandomPipe()\r\n+            upperPipes.append(newpipe[0])\r\n+            lowerPipes.append(newpipe[1])\r\n+\r\n+        # if the pipe is out of the screen, remove it\r\n         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n             upperPipes.pop(0)\r\n             lowerPipes.pop(0)\r\n         \r\n-        #lets blit our sprites \r\n-        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n-        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n+        # Lets blit our sprites now\r\n+        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n \r\n-        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n         myDigits = [int(x) for x in list(str(score))]\r\n         width = 0\r\n         for digit in myDigits:\r\n             width += GAME_SPRITES['numbers'][digit].get_width()\r\n         Xoffset = (SCREENWIDTH - width)/2\r\n \r\n         for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))\r\n             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n \r\n-def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n-    return False  \r\n+def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n+    if playery> GROUNDY - 25  or playery<0:\r\n+        GAME_SOUNDS['hit'].play()\r\n+        return True\r\n+    \r\n+    for pipe in upperPipes:\r\n+        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+        if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n \r\n+    for pipe in lowerPipes:\r\n+        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n \r\n+    return False\r\n+\r\n def getRandomPipe():\r\n-    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n-    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+    \"\"\"\r\n+    Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen\r\n+    \"\"\"\r\n+    pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n-    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))\r\n     pipeX = SCREENWIDTH + 10\r\n-    y1 = pipeheight - y2 + offset\r\n+    y1 = pipeHeight - y2 + offset\r\n     pipe = [\r\n-        {'x':pipeX, 'y':-y1},   #upper pipe\r\n-        {'x':pipeX, 'y':y2}    #lower pipe\r\n+        {'x': pipeX, 'y': -y1}, #upper Pipe\r\n+        {'x': pipeX, 'y': y2} #lower Pipe\r\n+    ]\r\n+    return pipe\r\n \r\n-        ]\r\n-    return pipe    \r\n-    \r\n-    \r\n \r\n \r\n \r\n-if __name__==\"__main__\":      #this will be main point from where game will start\r\n-    \r\n-    pygame.init()             #ini pygame module\r\n-    FPSCLOCK = pygame.time.Clock()    \r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n-    GAME_SPRITES['numbers'] = (\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    # This will be the main point from where our game will start\r\n+    pygame.init() # Initialize all pygame's modules\r\n+    FPSCLOCK = pygame.time.Clock()\r\n+    pygame.display.set_caption('Flappy Bird by CodeWithHarry')\r\n+    GAME_SPRITES['numbers'] = ( \r\n         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n@@ -194,11 +419,9 @@\n     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n     pygame.image.load(PIPE).convert_alpha()\r\n     )\r\n \r\n-\r\n-    #game sounds\r\n-\r\n+    # Game sounds\r\n     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n@@ -207,9 +430,8 @@\n     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n     while True:\r\n-        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-        mainGame()       #this is the main game func\r\n+        welcomeScreen() # Shows welcome screen to the user until he presses a button\r\n+        mainGame() # This is the main game function \r\n \r\n \r\n-\r\n"
                },
                {
                    "date": 1726653690316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,234 +1,24 @@\n-# import random  #for generating random nos\r\n-# import sys     #for exit \r\n-# import pygame\r\n-# from   pygame.locals import *  #basic pygame imports\r\n-\r\n-# #global var\r\n-# FPS = 32\r\n-# SCREENWIDTH = 289\r\n-# SCREENHEIGHT = 511\r\n-# SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-# GROUNDY = SCREENHEIGHT * 0.8\r\n-# GAME_SPRITES = {}\r\n-# GAME_SOUNDS = {}\r\n-\r\n-# #These 3 are separate becoz i want to make them global var \r\n-# PLAYER = 'gallery/sprites/bird.png'\r\n-# BACKGROUND = 'gallery/sprites/background.png'\r\n-# PIPE = 'gallery/sprites/pipe.png'\r\n-\r\n-\r\n-# def welcomeScreen():\r\n-#     \"\"\"\r\n-#     Shows welcome images on the screen\r\n-#     \"\"\"\r\n-\r\n-#     playerx = int(SCREENWIDTH/5)\r\n-#     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-#     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-#     messagey = int(SCREENHEIGHT*0.13)\r\n-#     basex = 0\r\n-\r\n-#     while True:\r\n-#         for event in pygame.event.get():\r\n-#             # if user clicks on cross button, close the game\r\n-#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-#                 pygame.quit()\r\n-#                 sys.exit()\r\n-\r\n-#             # If the user presses space or up key, start the game for them\r\n-#             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-#                 return\r\n-                \r\n-#             else:\r\n-#                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-#                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-#                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-#                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-#                 pygame.display.update()\r\n-#                 FPSCLOCK.tick(FPS)\r\n-\r\n-# def mainGame():\r\n-#     score = 0\r\n-#     playerx = int(SCREENWIDTH/5)\r\n-#     playery = int(SCREENWIDTH/2)\r\n-#     basex = 0\r\n-\r\n-#     #create 2 pipes for blitting on screen \r\n-\r\n-#     newPipe1 = getRandomPipe()\r\n-#     newPipe2 = getRandomPipe()\r\n-\r\n-#     # my list of upper and lower pipes\r\n-\r\n-#     upperPipes = [\r\n-#         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-#     ]\r\n-\r\n-#     lowerPipes = [\r\n-#         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-#     ]\r\n-\r\n-#     pipeVelX = -4\r\n-\r\n-#     playerVelY = -9\r\n-#     playerMaxVelY = 10\r\n-#     playerMinVelY = -8\r\n-#     playerAccY = 1\r\n-\r\n-#     playerFlapAccv = -8     #velocity while flapping\r\n-#     playerFlapped = False  # it is true only when bird is flapping \r\n-\r\n-\r\n-#     while True:\r\n-#         for event in pygame.event.get():\r\n-#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-#                 pygame.quit()\r\n-#                 sys.exit()\r\n-#             if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-#                 if playery > 0 :\r\n-#                     playerVelY = playerFlapAccv\r\n-#                     playerFlapped = True\r\n-#                     GAME_SOUNDS['wing'].play()\r\n-         \r\n-#         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n-#         if crashTest:\r\n-#             return\r\n-#         #check for score \r\n-#         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n-#         for pipe in upperPipes:\r\n-#             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-#             if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n-#                 score +=1\r\n-#                 print(f\"Your score is {score}\")\r\n-#                 GAME_SOUNDS['point'].play()\r\n-\r\n-#         if playerVelY < playerMaxVelY and not playerFlapped:\r\n-#             playerVelY += playerAccY\r\n-        \r\n-#         if playerFlapped:\r\n-#             playerFlapped = False\r\n-#         playerHeight =  GAME_SPRITES['player'].get_height()\r\n-#         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n-        \r\n-#         #move pipes to the left\r\n-#         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n-#             upperPipe['x'] += pipeVelX\r\n-#             lowerPipe['x'] += pipeVelX\r\n-\r\n-#         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n-#         if 0 < upperPipes[0]['x'] < 5:\r\n-#           newpipe = getRandomPipe()\r\n-#           upperPipes.append(newpipe[0])\r\n-#           lowerPipes.append(newpipe[1])\r\n- \r\n-#         # if the pipe is out of the screen , remove it \r\n-#         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-#             upperPipes.pop(0)\r\n-#             lowerPipes.pop(0)\r\n-        \r\n-#         #lets blit our sprites \r\n-#         SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n-#         for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-#             SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n-#             SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n-\r\n-#         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n-#         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n-#         myDigits = [int(x) for x in list(str(score))]\r\n-#         width = 0\r\n-#         for digit in myDigits:\r\n-#             width += GAME_SPRITES['numbers'][digit].get_width()\r\n-#         Xoffset = (SCREENWIDTH - width)/2\r\n-\r\n-#         for digit in myDigits:\r\n-#             SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n-#             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-#         pygame.display.update()\r\n-#         FPSCLOCK.tick(FPS)\r\n-\r\n-# def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n-#     return False  \r\n-\r\n-\r\n-# def getRandomPipe():\r\n-#     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n-#     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n-#     offset = SCREENHEIGHT/3\r\n-#     y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n-#     pipeX = SCREENWIDTH + 10\r\n-#     y1 = pipeheight - y2 + offset\r\n-#     pipe = [\r\n-#         {'x':pipeX, 'y':-y1},   #upper pipe\r\n-#         {'x':pipeX, 'y':y2}    #lower pipe\r\n-\r\n-#         ]\r\n-#     return pipe    \r\n-    \r\n-    \r\n-\r\n-\r\n-\r\n-# if __name__==\"__main__\":      #this will be main point from where game will start\r\n-    \r\n-#     pygame.init()             #ini pygame module\r\n-#     FPSCLOCK = pygame.time.Clock()    \r\n-#     pygame.display.set_caption('Flappy Bird by Sana')\r\n-#     GAME_SPRITES['numbers'] = (\r\n-#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-#     )\r\n-\r\n-#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-#     pygame.image.load(PIPE).convert_alpha()\r\n-#     )\r\n-\r\n-\r\n-#     #game sounds\r\n-\r\n-#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-#     while True:\r\n-#         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-#         mainGame()       #this is the main game func\r\n-\r\n-import random # For generating random numbers\r\n-import sys # We will use sys.exit to exit the program\r\n+import random  #for generating random nos\r\n+import sys     #for exit \r\n import pygame\r\n-from pygame.locals import * # Basic pygame imports\r\n+from   pygame.locals import *  #basic pygame imports\r\n \r\n-# Global Variables for the game\r\n+#global var\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n-SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))\r\n+SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n+\r\n+#These 3 are separate becoz i want to make them global var \r\n PLAYER = 'gallery/sprites/bird.png'\r\n BACKGROUND = 'gallery/sprites/background.png'\r\n PIPE = 'gallery/sprites/pipe.png'\r\n \r\n+\r\n def welcomeScreen():\r\n     \"\"\"\r\n     Shows welcome images on the screen\r\n     \"\"\"\r\n@@ -237,8 +27,9 @@\n     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n     messagey = int(SCREENHEIGHT*0.13)\r\n     basex = 0\r\n+\r\n     while True:\r\n         for event in pygame.event.get():\r\n             # if user clicks on cross button, close the game\r\n             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n@@ -247,8 +38,9 @@\n \r\n             # If the user presses space or up key, start the game for them\r\n             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                 return\r\n+                \r\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n@@ -261,21 +53,23 @@\n     playerx = int(SCREENWIDTH/5)\r\n     playery = int(SCREENWIDTH/2)\r\n     basex = 0\r\n \r\n-    # Create 2 pipes for blitting on the screen\r\n+    #create 2 pipes for blitting on screen \r\n+\r\n     newPipe1 = getRandomPipe()\r\n     newPipe2 = getRandomPipe()\r\n \r\n-    # my List of upper pipes\r\n+    # my list of upper and lower pipes\r\n+\r\n     upperPipes = [\r\n-        {'x': SCREENWIDTH+200, 'y':newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[0]['y']},\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n     ]\r\n-    # my List of lower pipes\r\n+\r\n     lowerPipes = [\r\n-        {'x': SCREENWIDTH+200, 'y':newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH+200+(SCREENWIDTH/2), 'y':newPipe2[1]['y']},\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n     ]\r\n \r\n     pipeVelX = -4\r\n \r\n@@ -283,126 +77,107 @@\n     playerMaxVelY = 10\r\n     playerMinVelY = -8\r\n     playerAccY = 1\r\n \r\n-    playerFlapAccv = -8 # velocity while flapping\r\n-    playerFlapped = False # It is true only when the bird is flapping\r\n+    playerFlapAccv = -8     #velocity while flapping\r\n+    playerFlapped = False  # it is true only when bird is flapping \r\n \r\n \r\n     while True:\r\n         for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n                 sys.exit()\r\n-            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n-                if playery > 0:\r\n+            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                if playery > 0 :\r\n                     playerVelY = playerFlapAccv\r\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n-\r\n-\r\n-        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes) # This function will return true if the player is crashed\r\n+         \r\n+        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n         if crashTest:\r\n-            return     \r\n-\r\n-        #check for score\r\n+            return\r\n+        #check for score \r\n         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n         for pipe in upperPipes:\r\n             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-            if pipeMidPos<= playerMidPos < pipeMidPos +4:\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n                 score +=1\r\n-                print(f\"Your score is {score}\") \r\n+                print(f\"Your score is {score}\")\r\n                 GAME_SOUNDS['point'].play()\r\n \r\n-\r\n-        if playerVelY <playerMaxVelY and not playerFlapped:\r\n+        if playerVelY < playerMaxVelY and not playerFlapped:\r\n             playerVelY += playerAccY\r\n-\r\n+        \r\n         if playerFlapped:\r\n-            playerFlapped = False            \r\n-        playerHeight = GAME_SPRITES['player'].get_height()\r\n+            playerFlapped = False\r\n+        playerHeight =  GAME_SPRITES['player'].get_height()\r\n         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n-\r\n-        # move pipes to the left\r\n+        \r\n+        #move pipes to the left\r\n         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n             upperPipe['x'] += pipeVelX\r\n             lowerPipe['x'] += pipeVelX\r\n \r\n-        # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n-        if 0<upperPipes[0]['x']<5:\r\n-            newpipe = getRandomPipe()\r\n-            upperPipes.append(newpipe[0])\r\n-            lowerPipes.append(newpipe[1])\r\n-\r\n-        # if the pipe is out of the screen, remove it\r\n+        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+        if 0 < upperPipes[0]['x'] < 5:\r\n+          newpipe = getRandomPipe()\r\n+          upperPipes.append(newpipe[0])\r\n+          lowerPipes.append(newpipe[1])\r\n+ \r\n+        # if the pipe is out of the screen , remove it \r\n         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n             upperPipes.pop(0)\r\n             lowerPipes.pop(0)\r\n         \r\n-        # Lets blit our sprites now\r\n-        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n-        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n+        #lets blit our sprites \r\n+        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n+        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n \r\n-        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n         myDigits = [int(x) for x in list(str(score))]\r\n         width = 0\r\n         for digit in myDigits:\r\n             width += GAME_SPRITES['numbers'][digit].get_width()\r\n         Xoffset = (SCREENWIDTH - width)/2\r\n \r\n         for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT*0.12))\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n \r\n-def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n-    if playery> GROUNDY - 25  or playery<0:\r\n-        GAME_SOUNDS['hit'].play()\r\n-        return True\r\n-    \r\n-    for pipe in upperPipes:\r\n-        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-        if(playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n-            GAME_SOUNDS['hit'].play()\r\n-            return True\r\n+def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n+    return False  \r\n \r\n-    for pipe in lowerPipes:\r\n-        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-            GAME_SOUNDS['hit'].play()\r\n-            return True\r\n \r\n-    return False\r\n-\r\n def getRandomPipe():\r\n-    \"\"\"\r\n-    Generate positions of two pipes(one bottom straight and one top rotated ) for blitting on the screen\r\n-    \"\"\"\r\n-    pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n+    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n-    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height()  - 1.2 *offset))\r\n+    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n     pipeX = SCREENWIDTH + 10\r\n-    y1 = pipeHeight - y2 + offset\r\n+    y1 = pipeheight - y2 + offset\r\n     pipe = [\r\n-        {'x': pipeX, 'y': -y1}, #upper Pipe\r\n-        {'x': pipeX, 'y': y2} #lower Pipe\r\n-    ]\r\n-    return pipe\r\n+        {'x':pipeX, 'y':-y1},   #upper pipe\r\n+        {'x':pipeX, 'y':y2}    #lower pipe\r\n \r\n+        ]\r\n+    return pipe    \r\n+    \r\n+    \r\n \r\n \r\n \r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    # This will be the main point from where our game will start\r\n-    pygame.init() # Initialize all pygame's modules\r\n-    FPSCLOCK = pygame.time.Clock()\r\n-    pygame.display.set_caption('Flappy Bird by CodeWithHarry')\r\n-    GAME_SPRITES['numbers'] = ( \r\n+if __name__==\"__main__\":      #this will be main point from where game will start\r\n+    \r\n+    pygame.init()             #ini pygame module\r\n+    FPSCLOCK = pygame.time.Clock()    \r\n+    pygame.display.set_caption('Flappy Bird by Sana')\r\n+    GAME_SPRITES['numbers'] = (\r\n         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n@@ -419,9 +194,11 @@\n     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n     pygame.image.load(PIPE).convert_alpha()\r\n     )\r\n \r\n-    # Game sounds\r\n+\r\n+    #game sounds\r\n+\r\n     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n@@ -430,8 +207,9 @@\n     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n     while True:\r\n-        welcomeScreen() # Shows welcome screen to the user until he presses a button\r\n-        mainGame() # This is the main game function \r\n+        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+        mainGame()       #this is the main game func\r\n \r\n \r\n+\r\n"
                },
                {
                    "date": 1726654314528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n          \r\n         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n         if crashTest:\r\n             return\r\n+\r\n         #check for score \r\n         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n         for pipe in upperPipes:\r\n             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n@@ -149,9 +150,11 @@\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n \r\n def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n-    return False  \r\n+    if playery> GROUNDY - 25  or playery<0:\r\n+        GAME_SOUNDS['hit'].play()\r\n+    return True  \r\n \r\n \r\n def getRandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n"
                },
                {
                    "date": 1726654694609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n \r\n def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n     if playery> GROUNDY - 25  or playery<0:\r\n         GAME_SOUNDS['hit'].play()\r\n-    return True  \r\n+        return True  \r\n \r\n \r\n def getRandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n"
                },
                {
                    "date": 1726654984895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,10 +153,22 @@\n def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n     if playery> GROUNDY - 25  or playery<0:\r\n         GAME_SOUNDS['hit'].play()\r\n         return True  \r\n+    \r\n+    for pipe in upperPipes:\r\n+        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+        if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n+           GAME_SOUNDS['hit'].play()\r\n+           return True\r\n \r\n+    for pipe in lowerPipes:\r\n+        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n \r\n+    return False\r\n+\r\n def getRandomPipe():\r\n     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT/3\r\n"
                },
                {
                    "date": 1726655031244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n \r\n-def isCollide(playerx,playery,uppePipes,lowerPipes):\r\n+def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n     if playery> GROUNDY - 25  or playery<0:\r\n         GAME_SOUNDS['hit'].play()\r\n         return True  \r\n     \r\n"
                },
                {
                    "date": 1726655305834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n            GAME_SOUNDS['hit'].play()\r\n            return True\r\n \r\n     for pipe in lowerPipes:\r\n-        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n             GAME_SOUNDS['hit'].play()\r\n             return True\r\n \r\n     return False\r\n"
                },
                {
                    "date": 1726655317695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n            GAME_SOUNDS['hit'].play()\r\n            return True\r\n \r\n     for pipe in lowerPipes:\r\n-        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width()):\r\n+        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n             GAME_SOUNDS['hit'].play()\r\n             return True\r\n \r\n     return False\r\n"
                },
                {
                    "date": 1726656132902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,295 @@\n-import random  #for generating random nos\r\n-import sys     #for exit \r\n+# import random  #for generating random nos\r\n+# import sys     #for exit \r\n+# import pygame\r\n+# from   pygame.locals import *  #basic pygame imports\r\n+\r\n+# #global var\r\n+# FPS = 32\r\n+# SCREENWIDTH = 289\r\n+# SCREENHEIGHT = 511\r\n+# SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+# GROUNDY = SCREENHEIGHT * 0.8\r\n+# GAME_SPRITES = {}\r\n+# GAME_SOUNDS = {}\r\n+\r\n+# #These 3 are separate becoz i want to make them global var \r\n+# PLAYER = 'gallery/sprites/bird.png'\r\n+# BACKGROUND = 'gallery/sprites/background.png'\r\n+# PIPE = 'gallery/sprites/pipe.png'\r\n+\r\n+\r\n+# def welcomeScreen():\r\n+#     \"\"\"\r\n+#     Shows welcome images on the screen\r\n+#     \"\"\"\r\n+\r\n+#     playerx = int(SCREENWIDTH/5)\r\n+#     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+#     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+#     messagey = int(SCREENHEIGHT*0.13)\r\n+#     basex = 0\r\n+\r\n+#     while True:\r\n+#         for event in pygame.event.get():\r\n+#             # if user clicks on cross button, close the game\r\n+#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+#                 pygame.quit()\r\n+#                 sys.exit()\r\n+\r\n+#             # If the user presses space or up key, start the game for them\r\n+#             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+#                 return\r\n+                \r\n+#             else:\r\n+#                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+#                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+#                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+#                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+#                 pygame.display.update()\r\n+#                 FPSCLOCK.tick(FPS)\r\n+\r\n+# def mainGame():\r\n+#     score = 0\r\n+#     playerx = int(SCREENWIDTH/5)\r\n+#     playery = int(SCREENWIDTH/2)\r\n+#     basex = 0\r\n+\r\n+#     #create 2 pipes for blitting on screen \r\n+\r\n+#     newPipe1 = getRandomPipe()\r\n+#     newPipe2 = getRandomPipe()\r\n+\r\n+#     # my list of upper and lower pipes\r\n+\r\n+#     upperPipes = [\r\n+#         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n+#     ]\r\n+\r\n+#     lowerPipes = [\r\n+#         {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+#     ]\r\n+\r\n+#     pipeVelX = -4\r\n+\r\n+#     playerVelY = -9\r\n+#     playerMaxVelY = 10\r\n+#     playerMinVelY = -8\r\n+#     playerAccY = 1\r\n+\r\n+#     playerFlapAccv = -8     #velocity while flapping\r\n+#     playerFlapped = False  # it is true only when bird is flapping \r\n+\r\n+\r\n+#     while True:\r\n+#         for event in pygame.event.get():\r\n+#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+#                 pygame.quit()\r\n+#                 sys.exit()\r\n+#             if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+#                 if playery > 0 :\r\n+#                     playerVelY = playerFlapAccv\r\n+#                     playerFlapped = True\r\n+#                     GAME_SOUNDS['wing'].play()\r\n+         \r\n+#         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+#         if crashTest:\r\n+#             return\r\n+\r\n+#         #check for score \r\n+#         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+#         for pipe in upperPipes:\r\n+#             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+#             if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+#                 score +=1\r\n+#                 print(f\"Your score is {score}\")\r\n+#                 GAME_SOUNDS['point'].play()\r\n+\r\n+#         if playerVelY < playerMaxVelY and not playerFlapped:\r\n+#             playerVelY += playerAccY\r\n+        \r\n+#         if playerFlapped:\r\n+#             playerFlapped = False\r\n+#         playerHeight =  GAME_SPRITES['player'].get_height()\r\n+#         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+        \r\n+#         #move pipes to the left\r\n+#         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+#             upperPipe['x'] += pipeVelX\r\n+#             lowerPipe['x'] += pipeVelX\r\n+\r\n+#         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+#         if 0 < upperPipes[0]['x'] < 5:\r\n+#           newpipe = getRandomPipe()\r\n+#           upperPipes.append(newpipe[0])\r\n+#           lowerPipes.append(newpipe[1])\r\n+ \r\n+#         # if the pipe is out of the screen , remove it \r\n+#         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+#             upperPipes.pop(0)\r\n+#             lowerPipes.pop(0)\r\n+        \r\n+#         #lets blit our sprites \r\n+#         SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n+#         for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n+#             SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n+#             SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n+\r\n+#         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n+#         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+#         myDigits = [int(x) for x in list(str(score))]\r\n+#         width = 0\r\n+#         for digit in myDigits:\r\n+#             width += GAME_SPRITES['numbers'][digit].get_width()\r\n+#         Xoffset = (SCREENWIDTH - width)/2\r\n+\r\n+#         for digit in myDigits:\r\n+#             SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+#             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+#         pygame.display.update()\r\n+#         FPSCLOCK.tick(FPS)\r\n+\r\n+# def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n+#     if playery> GROUNDY - 25  or playery<0:\r\n+#         GAME_SOUNDS['hit'].play()\r\n+#         return True  \r\n+    \r\n+#     for pipe in upperPipes:\r\n+#         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+#         if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n+#            GAME_SOUNDS['hit'].play()\r\n+#            return True\r\n+\r\n+#     for pipe in lowerPipes:\r\n+#         if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+#             GAME_SOUNDS['hit'].play()\r\n+#             return True\r\n+\r\n+#     return False\r\n+\r\n+# def getRandomPipe():\r\n+#     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n+#     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+#     offset = SCREENHEIGHT/3\r\n+#     y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+#     pipeX = SCREENWIDTH + 10\r\n+#     y1 = pipeheight - y2 + offset\r\n+#     pipe = [\r\n+#         {'x':pipeX, 'y':-y1},   #upper pipe\r\n+#         {'x':pipeX, 'y':y2}    #lower pipe\r\n+\r\n+#         ]\r\n+#     return pipe    \r\n+    \r\n+    \r\n+\r\n+\r\n+\r\n+# if __name__==\"__main__\":      #this will be main point from where game will start\r\n+    \r\n+#     pygame.init()             #ini pygame module\r\n+#     FPSCLOCK = pygame.time.Clock()    \r\n+#     pygame.display.set_caption('Flappy Bird by Sana')\r\n+#     GAME_SPRITES['numbers'] = (\r\n+#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+#     )\r\n+\r\n+#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+#     pygame.image.load(PIPE).convert_alpha()\r\n+#     )\r\n+\r\n+\r\n+#     #game sounds\r\n+\r\n+#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+\r\n+#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+\r\n+#     while True:\r\n+#         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+#         mainGame()       #this is the main game func\r\n+\r\n+import random  # for generating random nos\r\n+import sys  # for exit\r\n import pygame\r\n-from   pygame.locals import *  #basic pygame imports\r\n+from pygame.locals import *  # basic pygame imports\r\n \r\n-#global var\r\n+# Global variables\r\n FPS = 32\r\n SCREENWIDTH = 289\r\n SCREENHEIGHT = 511\r\n-SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))  # initialize a window or screen for display\r\n GROUNDY = SCREENHEIGHT * 0.8\r\n GAME_SPRITES = {}\r\n GAME_SOUNDS = {}\r\n \r\n-#These 3 are separate becoz i want to make them global var \r\n+# File paths\r\n PLAYER = 'gallery/sprites/bird.png'\r\n BACKGROUND = 'gallery/sprites/background.png'\r\n PIPE = 'gallery/sprites/pipe.png'\r\n \r\n-\r\n def welcomeScreen():\r\n-    \"\"\"\r\n-    Shows welcome images on the screen\r\n-    \"\"\"\r\n-\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-    messagey = int(SCREENHEIGHT*0.13)\r\n+    \"\"\"Shows welcome images on the screen.\"\"\"\r\n+    playerx = int(SCREENWIDTH / 5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height()) / 2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width()) / 2)\r\n+    messagey = int(SCREENHEIGHT * 0.13)\r\n     basex = 0\r\n \r\n     while True:\r\n         for event in pygame.event.get():\r\n             # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n                 sys.exit()\r\n \r\n-            # If the user presses space or up key, start the game for them\r\n-            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+            # If the user presses space or up key, start the game\r\n+            elif event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n                 return\r\n-                \r\n             else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex, messagey))\r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n def mainGame():\r\n     score = 0\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int(SCREENWIDTH/2)\r\n+    playerx = int(SCREENWIDTH / 5)\r\n+    playery = int(SCREENHEIGHT / 2)\r\n     basex = 0\r\n \r\n-    #create 2 pipes for blitting on screen \r\n-\r\n+    # Create two pipes for blitting on the screen\r\n     newPipe1 = getRandomPipe()\r\n     newPipe2 = getRandomPipe()\r\n \r\n-    # my list of upper and lower pipes\r\n-\r\n+    # List of upper and lower pipes\r\n     upperPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n+        {'x': SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH + 200 + (SCREENWIDTH / 2), 'y': newPipe2[0]['y']},\r\n     ]\r\n-\r\n     lowerPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+        {'x': SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH + 200 + (SCREENWIDTH / 2), 'y': newPipe2[1]['y']},\r\n     ]\r\n \r\n     pipeVelX = -4\r\n \r\n@@ -77,121 +297,115 @@\n     playerMaxVelY = 10\r\n     playerMinVelY = -8\r\n     playerAccY = 1\r\n \r\n-    playerFlapAccv = -8     #velocity while flapping\r\n-    playerFlapped = False  # it is true only when bird is flapping \r\n+    playerFlapAccv = -8  # velocity while flapping\r\n+    playerFlapped = False  # True only when the bird is flapping\r\n \r\n-\r\n     while True:\r\n         for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n                 sys.exit()\r\n-            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                if playery > 0 :\r\n+            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n+                if playery > 0:\r\n                     playerVelY = playerFlapAccv\r\n                     playerFlapped = True\r\n                     GAME_SOUNDS['wing'].play()\r\n-         \r\n-        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+\r\n+        # Check if player has crashed\r\n+        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes)\r\n         if crashTest:\r\n             return\r\n \r\n-        #check for score \r\n-        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+        # Check for score\r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width() / 2\r\n         for pipe in upperPipes:\r\n-            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n-                score +=1\r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width() / 2\r\n+            if pipeMidPos <= playerMidPos < pipeMidPos + 4:\r\n+                score += 1\r\n                 print(f\"Your score is {score}\")\r\n                 GAME_SOUNDS['point'].play()\r\n \r\n         if playerVelY < playerMaxVelY and not playerFlapped:\r\n             playerVelY += playerAccY\r\n-        \r\n+\r\n         if playerFlapped:\r\n             playerFlapped = False\r\n-        playerHeight =  GAME_SPRITES['player'].get_height()\r\n+\r\n+        playerHeight = GAME_SPRITES['player'].get_height()\r\n         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n-        \r\n-        #move pipes to the left\r\n-        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+\r\n+        # Move pipes to the left\r\n+        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n             upperPipe['x'] += pipeVelX\r\n             lowerPipe['x'] += pipeVelX\r\n \r\n-        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+        # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n         if 0 < upperPipes[0]['x'] < 5:\r\n-          newpipe = getRandomPipe()\r\n-          upperPipes.append(newpipe[0])\r\n-          lowerPipes.append(newpipe[1])\r\n- \r\n-        # if the pipe is out of the screen , remove it \r\n+            newPipe = getRandomPipe()\r\n+            upperPipes.append(newPipe[0])\r\n+            lowerPipes.append(newPipe[1])\r\n+\r\n+        # Remove the pipe if it is out of the screen\r\n         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n             upperPipes.pop(0)\r\n             lowerPipes.pop(0)\r\n-        \r\n-        #lets blit our sprites \r\n-        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n-        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n \r\n-        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+        # Blit sprites\r\n+        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n+\r\n+        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+\r\n+        # Display score\r\n         myDigits = [int(x) for x in list(str(score))]\r\n-        width = 0\r\n-        for digit in myDigits:\r\n-            width += GAME_SPRITES['numbers'][digit].get_width()\r\n-        Xoffset = (SCREENWIDTH - width)/2\r\n+        width = sum(GAME_SPRITES['numbers'][digit].get_width() for digit in myDigits)\r\n+        Xoffset = (SCREENWIDTH - width) / 2\r\n \r\n         for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT * 0.12))\r\n             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+\r\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n \r\n-def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n-    if playery> GROUNDY - 25  or playery<0:\r\n+def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n+    if playery > GROUNDY - 25 or playery < 0:\r\n         GAME_SOUNDS['hit'].play()\r\n-        return True  \r\n-    \r\n+        return True\r\n+\r\n     for pipe in upperPipes:\r\n         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-        if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n-           GAME_SOUNDS['hit'].play()\r\n-           return True\r\n+        if playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n \r\n     for pipe in lowerPipes:\r\n-        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+        if playery + GAME_SPRITES['player'].get_height() > pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n             GAME_SOUNDS['hit'].play()\r\n             return True\r\n \r\n     return False\r\n \r\n def getRandomPipe():\r\n-    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n-    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT/3\r\n-    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    \"\"\"Generate positions of two pipes (one bottom straight and one top rotated).\"\"\"\r\n+    pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+    offset = SCREENHEIGHT / 3\r\n+    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n     pipeX = SCREENWIDTH + 10\r\n-    y1 = pipeheight - y2 + offset\r\n-    pipe = [\r\n-        {'x':pipeX, 'y':-y1},   #upper pipe\r\n-        {'x':pipeX, 'y':y2}    #lower pipe\r\n+    y1 = pipeHeight - y2 + offset\r\n+    return [{'x': pipeX, 'y': -y1}, {'x': pipeX, 'y': y2}]\r\n \r\n-        ]\r\n-    return pipe    \r\n-    \r\n-    \r\n+if __name__ == \"__main__\":\r\n+    pygame.init()\r\n+    FPSCLOCK = pygame.time.Clock()\r\n+    pygame.display.set_caption('Flappy Bird by Sana')\r\n \r\n-\r\n-\r\n-if __name__==\"__main__\":      #this will be main point from where game will start\r\n-    \r\n-    pygame.init()             #ini pygame module\r\n-    FPSCLOCK = pygame.time.Clock()    \r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n+    # Load all sprites\r\n     GAME_SPRITES['numbers'] = (\r\n         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n@@ -202,18 +416,16 @@\n         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n     )\r\n-\r\n-    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-    pygame.image.load(PIPE).convert_alpha()\r\n+    GAME_SPRITES['message'] = pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    GAME_SPRITES['base'] = pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+    GAME_SPRITES['pipe'] = (\r\n+        pygame.transform.rotate(pygame.image.load(PIPE).convert_alpha(), 180),\r\n+        pygame.image.load(PIPE).convert_alpha()\r\n     )\r\n \r\n-\r\n-    #game sounds\r\n-\r\n+    # Load sounds\r\n     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n@@ -222,9 +434,8 @@\n     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n     while True:\r\n-        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-        mainGame()       #this is the main game func\r\n+        welcomeScreen()  # Show welcome screen to the user until they press a button\r\n+        mainGame()  # Start the main game\r\n \r\n \r\n-\r\n"
                },
                {
                    "date": 1726656255371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,217 +225,107 @@\n #     while True:\r\n #         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n #         mainGame()       #this is the main game func\r\n \r\n-import random  # for generating random nos\r\n-import sys  # for exit\r\n+\r\n+import random\r\n import pygame\r\n-from pygame.locals import *  # basic pygame imports\r\n+import sys\r\n+from pygame.locals import *\r\n \r\n-# Global variables\r\n-FPS = 32\r\n-SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n-SCREEN = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))  # initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.8\r\n-GAME_SPRITES = {}\r\n-GAME_SOUNDS = {}\r\n+# Initialize Pygame\r\n+pygame.init()\r\n \r\n-# File paths\r\n-PLAYER = 'gallery/sprites/bird.png'\r\n-BACKGROUND = 'gallery/sprites/background.png'\r\n-PIPE = 'gallery/sprites/pipe.png'\r\n+# Global Variables\r\n+SCREEN_WIDTH = 400\r\n+SCREEN_HEIGHT = 600\r\n+SCREEN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\r\n+FPS = 30\r\n+GROUND_Y = SCREEN_HEIGHT * 0.8\r\n \r\n-def welcomeScreen():\r\n-    \"\"\"Shows welcome images on the screen.\"\"\"\r\n-    playerx = int(SCREENWIDTH / 5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height()) / 2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width()) / 2)\r\n-    messagey = int(SCREENHEIGHT * 0.13)\r\n-    basex = 0\r\n+# Load images\r\n+BACKGROUND = pygame.image.load('gallery/sprites/background.png')\r\n+BIRD = pygame.image.load('gallery/sprites/bird.png')\r\n+PIPE = pygame.image.load('gallery/sprites/pipe.png')\r\n+BASE = pygame.image.load('gallery/sprites/base.png')\r\n \r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n+# Function to generate random pipes\r\n+def get_random_pipe():\r\n+    \"\"\"Return a randomly generated pair of pipes (upper and lower)\"\"\"\r\n+    pipe_height = PIPE.get_height()\r\n+    offset = SCREEN_HEIGHT / 3\r\n+    y2 = offset + random.randrange(0, int(SCREEN_HEIGHT - BASE.get_height() - 1.5 * offset))\r\n+    pipe_x = SCREEN_WIDTH + 10\r\n+    y1 = pipe_height - y2 + offset\r\n+    return [{'x': pipe_x, 'y': -y1}, {'x': pipe_x, 'y': y2}]\r\n \r\n-            # If the user presses space or up key, start the game\r\n-            elif event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n-                return\r\n-            else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex, messagey))\r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n-                pygame.display.update()\r\n-                FPSCLOCK.tick(FPS)\r\n+def main_game():\r\n+    bird_x = SCREEN_WIDTH // 5\r\n+    bird_y = SCREEN_HEIGHT // 2\r\n+    bird_velocity_y = 0\r\n+    bird_acceleration_y = 1\r\n+    bird_flap_velocity = -10\r\n+    bird_flapped = False\r\n \r\n-def mainGame():\r\n-    score = 0\r\n-    playerx = int(SCREENWIDTH / 5)\r\n-    playery = int(SCREENHEIGHT / 2)\r\n-    basex = 0\r\n+    # List of pipes\r\n+    new_pipe1 = get_random_pipe()\r\n+    new_pipe2 = get_random_pipe()\r\n \r\n-    # Create two pipes for blitting on the screen\r\n-    newPipe1 = getRandomPipe()\r\n-    newPipe2 = getRandomPipe()\r\n-\r\n-    # List of upper and lower pipes\r\n-    upperPipes = [\r\n-        {'x': SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200 + (SCREENWIDTH / 2), 'y': newPipe2[0]['y']},\r\n+    upper_pipes = [\r\n+        {'x': SCREEN_WIDTH + 200, 'y': new_pipe1[0]['y']},\r\n+        {'x': SCREEN_WIDTH + 200 + (SCREEN_WIDTH / 2), 'y': new_pipe2[0]['y']},\r\n     ]\r\n-    lowerPipes = [\r\n-        {'x': SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH + 200 + (SCREENWIDTH / 2), 'y': newPipe2[1]['y']},\r\n+    lower_pipes = [\r\n+        {'x': SCREEN_WIDTH + 200, 'y': new_pipe1[1]['y']},\r\n+        {'x': SCREEN_WIDTH + 200 + (SCREEN_WIDTH / 2), 'y': new_pipe2[1]['y']},\r\n     ]\r\n \r\n-    pipeVelX = -4\r\n+    pipe_velocity_x = -4\r\n+    base_x = 0\r\n \r\n-    playerVelY = -9\r\n-    playerMaxVelY = 10\r\n-    playerMinVelY = -8\r\n-    playerAccY = 1\r\n+    clock = pygame.time.Clock()\r\n \r\n-    playerFlapAccv = -8  # velocity while flapping\r\n-    playerFlapped = False  # True only when the bird is flapping\r\n-\r\n     while True:\r\n         for event in pygame.event.get():\r\n             if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n                 pygame.quit()\r\n                 sys.exit()\r\n+\r\n             if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n-                if playery > 0:\r\n-                    playerVelY = playerFlapAccv\r\n-                    playerFlapped = True\r\n-                    GAME_SOUNDS['wing'].play()\r\n+                if bird_y > 0:\r\n+                    bird_velocity_y = bird_flap_velocity\r\n+                    bird_flapped = True\r\n \r\n-        # Check if player has crashed\r\n-        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes)\r\n-        if crashTest:\r\n-            return\r\n+        # Bird movement\r\n+        bird_velocity_y += bird_acceleration_y\r\n+        bird_y = bird_y + min(bird_velocity_y, GROUND_Y - bird_y - BIRD.get_height())\r\n \r\n-        # Check for score\r\n-        playerMidPos = playerx + GAME_SPRITES['player'].get_width() / 2\r\n-        for pipe in upperPipes:\r\n-            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width() / 2\r\n-            if pipeMidPos <= playerMidPos < pipeMidPos + 4:\r\n-                score += 1\r\n-                print(f\"Your score is {score}\")\r\n-                GAME_SOUNDS['point'].play()\r\n+        # Move pipes\r\n+        for upper_pipe, lower_pipe in zip(upper_pipes, lower_pipes):\r\n+            upper_pipe['x'] += pipe_velocity_x\r\n+            lower_pipe['x'] += pipe_velocity_x\r\n \r\n-        if playerVelY < playerMaxVelY and not playerFlapped:\r\n-            playerVelY += playerAccY\r\n+        # Add new pipes\r\n+        if 0 < upper_pipes[0]['x'] < 5:\r\n+            new_pipe = get_random_pipe()\r\n+            upper_pipes.append(new_pipe[0])\r\n+            lower_pipes.append(new_pipe[1])\r\n \r\n-        if playerFlapped:\r\n-            playerFlapped = False\r\n+        # Remove pipes that go off-screen\r\n+        if upper_pipes[0]['x'] < -PIPE.get_width():\r\n+            upper_pipes.pop(0)\r\n+            lower_pipes.pop(0)\r\n \r\n-        playerHeight = GAME_SPRITES['player'].get_height()\r\n-        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+        # Draw everything on the screen\r\n+        SCREEN.blit(BACKGROUND, (0, 0))\r\n+        for upper_pipe, lower_pipe in zip(upper_pipes, lower_pipes):\r\n+            SCREEN.blit(pygame.transform.rotate(PIPE, 180), (upper_pipe['x'], upper_pipe['y']))\r\n+            SCREEN.blit(PIPE, (lower_pipe['x'], lower_pipe['y']))\r\n \r\n-        # Move pipes to the left\r\n-        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n-            upperPipe['x'] += pipeVelX\r\n-            lowerPipe['x'] += pipeVelX\r\n+        SCREEN.blit(BASE, (base_x, GROUND_Y))\r\n+        SCREEN.blit(BIRD, (bird_x, bird_y))\r\n \r\n-        # Add a new pipe when the first is about to cross the leftmost part of the screen\r\n-        if 0 < upperPipes[0]['x'] < 5:\r\n-            newPipe = getRandomPipe()\r\n-            upperPipes.append(newPipe[0])\r\n-            lowerPipes.append(newPipe[1])\r\n-\r\n-        # Remove the pipe if it is out of the screen\r\n-        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-            upperPipes.pop(0)\r\n-            lowerPipes.pop(0)\r\n-\r\n-        # Blit sprites\r\n-        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n-        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))\r\n-\r\n-        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-\r\n-        # Display score\r\n-        myDigits = [int(x) for x in list(str(score))]\r\n-        width = sum(GAME_SPRITES['numbers'][digit].get_width() for digit in myDigits)\r\n-        Xoffset = (SCREENWIDTH - width) / 2\r\n-\r\n-        for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit], (Xoffset, SCREENHEIGHT * 0.12))\r\n-            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-\r\n         pygame.display.update()\r\n-        FPSCLOCK.tick(FPS)\r\n+        clock.tick(FPS)\r\n \r\n-def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n-    if playery > GROUNDY - 25 or playery < 0:\r\n-        GAME_SOUNDS['hit'].play()\r\n-        return True\r\n-\r\n-    for pipe in upperPipes:\r\n-        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-        if playery < pipeHeight + pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-            GAME_SOUNDS['hit'].play()\r\n-            return True\r\n-\r\n-    for pipe in lowerPipes:\r\n-        if playery + GAME_SPRITES['player'].get_height() > pipe['y'] and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-            GAME_SOUNDS['hit'].play()\r\n-            return True\r\n-\r\n-    return False\r\n-\r\n-def getRandomPipe():\r\n-    \"\"\"Generate positions of two pipes (one bottom straight and one top rotated).\"\"\"\r\n-    pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT / 3\r\n-    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n-    pipeX = SCREENWIDTH + 10\r\n-    y1 = pipeHeight - y2 + offset\r\n-    return [{'x': pipeX, 'y': -y1}, {'x': pipeX, 'y': y2}]\r\n-\r\n if __name__ == \"__main__\":\r\n-    pygame.init()\r\n-    FPSCLOCK = pygame.time.Clock()\r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n-\r\n-    # Load all sprites\r\n-    GAME_SPRITES['numbers'] = (\r\n-        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-    )\r\n-    GAME_SPRITES['message'] = pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] = pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-    GAME_SPRITES['pipe'] = (\r\n-        pygame.transform.rotate(pygame.image.load(PIPE).convert_alpha(), 180),\r\n-        pygame.image.load(PIPE).convert_alpha()\r\n-    )\r\n-\r\n-    # Load sounds\r\n-    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-    while True:\r\n-        welcomeScreen()  # Show welcome screen to the user until they press a button\r\n-        mainGame()  # Start the main game\r\n-\r\n-\r\n+    main_game()\r\n"
                },
                {
                    "date": 1726656291983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,10 +235,10 @@\n # Initialize Pygame\r\n pygame.init()\r\n \r\n # Global Variables\r\n-SCREEN_WIDTH = 400\r\n-SCREEN_HEIGHT = 600\r\n+SCREEN_WIDTH = 289\r\n+SCREEN_HEIGHT = 511\r\n SCREEN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\r\n FPS = 30\r\n GROUND_Y = SCREEN_HEIGHT * 0.8\r\n \r\n"
                },
                {
                    "date": 1726656409797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,107 +225,4 @@\n #     while True:\r\n #         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n #         mainGame()       #this is the main game func\r\n \r\n-\r\n-import random\r\n-import pygame\r\n-import sys\r\n-from pygame.locals import *\r\n-\r\n-# Initialize Pygame\r\n-pygame.init()\r\n-\r\n-# Global Variables\r\n-SCREEN_WIDTH = 289\r\n-SCREEN_HEIGHT = 511\r\n-SCREEN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\r\n-FPS = 30\r\n-GROUND_Y = SCREEN_HEIGHT * 0.8\r\n-\r\n-# Load images\r\n-BACKGROUND = pygame.image.load('gallery/sprites/background.png')\r\n-BIRD = pygame.image.load('gallery/sprites/bird.png')\r\n-PIPE = pygame.image.load('gallery/sprites/pipe.png')\r\n-BASE = pygame.image.load('gallery/sprites/base.png')\r\n-\r\n-# Function to generate random pipes\r\n-def get_random_pipe():\r\n-    \"\"\"Return a randomly generated pair of pipes (upper and lower)\"\"\"\r\n-    pipe_height = PIPE.get_height()\r\n-    offset = SCREEN_HEIGHT / 3\r\n-    y2 = offset + random.randrange(0, int(SCREEN_HEIGHT - BASE.get_height() - 1.5 * offset))\r\n-    pipe_x = SCREEN_WIDTH + 10\r\n-    y1 = pipe_height - y2 + offset\r\n-    return [{'x': pipe_x, 'y': -y1}, {'x': pipe_x, 'y': y2}]\r\n-\r\n-def main_game():\r\n-    bird_x = SCREEN_WIDTH // 5\r\n-    bird_y = SCREEN_HEIGHT // 2\r\n-    bird_velocity_y = 0\r\n-    bird_acceleration_y = 1\r\n-    bird_flap_velocity = -10\r\n-    bird_flapped = False\r\n-\r\n-    # List of pipes\r\n-    new_pipe1 = get_random_pipe()\r\n-    new_pipe2 = get_random_pipe()\r\n-\r\n-    upper_pipes = [\r\n-        {'x': SCREEN_WIDTH + 200, 'y': new_pipe1[0]['y']},\r\n-        {'x': SCREEN_WIDTH + 200 + (SCREEN_WIDTH / 2), 'y': new_pipe2[0]['y']},\r\n-    ]\r\n-    lower_pipes = [\r\n-        {'x': SCREEN_WIDTH + 200, 'y': new_pipe1[1]['y']},\r\n-        {'x': SCREEN_WIDTH + 200 + (SCREEN_WIDTH / 2), 'y': new_pipe2[1]['y']},\r\n-    ]\r\n-\r\n-    pipe_velocity_x = -4\r\n-    base_x = 0\r\n-\r\n-    clock = pygame.time.Clock()\r\n-\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-\r\n-            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n-                if bird_y > 0:\r\n-                    bird_velocity_y = bird_flap_velocity\r\n-                    bird_flapped = True\r\n-\r\n-        # Bird movement\r\n-        bird_velocity_y += bird_acceleration_y\r\n-        bird_y = bird_y + min(bird_velocity_y, GROUND_Y - bird_y - BIRD.get_height())\r\n-\r\n-        # Move pipes\r\n-        for upper_pipe, lower_pipe in zip(upper_pipes, lower_pipes):\r\n-            upper_pipe['x'] += pipe_velocity_x\r\n-            lower_pipe['x'] += pipe_velocity_x\r\n-\r\n-        # Add new pipes\r\n-        if 0 < upper_pipes[0]['x'] < 5:\r\n-            new_pipe = get_random_pipe()\r\n-            upper_pipes.append(new_pipe[0])\r\n-            lower_pipes.append(new_pipe[1])\r\n-\r\n-        # Remove pipes that go off-screen\r\n-        if upper_pipes[0]['x'] < -PIPE.get_width():\r\n-            upper_pipes.pop(0)\r\n-            lower_pipes.pop(0)\r\n-\r\n-        # Draw everything on the screen\r\n-        SCREEN.blit(BACKGROUND, (0, 0))\r\n-        for upper_pipe, lower_pipe in zip(upper_pipes, lower_pipes):\r\n-            SCREEN.blit(pygame.transform.rotate(PIPE, 180), (upper_pipe['x'], upper_pipe['y']))\r\n-            SCREEN.blit(PIPE, (lower_pipe['x'], lower_pipe['y']))\r\n-\r\n-        SCREEN.blit(BASE, (base_x, GROUND_Y))\r\n-        SCREEN.blit(BIRD, (bird_x, bird_y))\r\n-\r\n-        pygame.display.update()\r\n-        clock.tick(FPS)\r\n-\r\n-if __name__ == \"__main__\":\r\n-    main_game()\r\n"
                },
                {
                    "date": 1726656476824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,228 +1,366 @@\n-# import random  #for generating random nos\r\n-# import sys     #for exit \r\n-# import pygame\r\n-# from   pygame.locals import *  #basic pygame imports\r\n+import random  #for generating random nos\r\n+import sys     #for exit \r\n+import pygame\r\n+from   pygame.locals import *  #basic pygame imports\r\n \r\n-# #global var\r\n-# FPS = 32\r\n-# SCREENWIDTH = 289\r\n-# SCREENHEIGHT = 511\r\n-# SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-# GROUNDY = SCREENHEIGHT * 0.8\r\n-# GAME_SPRITES = {}\r\n-# GAME_SOUNDS = {}\r\n+#global var\r\n+FPS = 32\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n+SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+GROUNDY = SCREENHEIGHT * 0.8\r\n+GAME_SPRITES = {}\r\n+GAME_SOUNDS = {}\r\n \r\n-# #These 3 are separate becoz i want to make them global var \r\n-# PLAYER = 'gallery/sprites/bird.png'\r\n-# BACKGROUND = 'gallery/sprites/background.png'\r\n-# PIPE = 'gallery/sprites/pipe.png'\r\n+#These 3 are separate becoz i want to make them global var \r\n+PLAYER = 'gallery/sprites/bird.png'\r\n+BACKGROUND = 'gallery/sprites/background.png'\r\n+PIPE = 'gallery/sprites/pipe.png'\r\n \r\n \r\n-# def welcomeScreen():\r\n-#     \"\"\"\r\n-#     Shows welcome images on the screen\r\n-#     \"\"\"\r\n+def welcomeScreen():\r\n+    \"\"\"\r\n+    Shows welcome images on the screen\r\n+    \"\"\"\r\n \r\n-#     playerx = int(SCREENWIDTH/5)\r\n-#     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-#     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-#     messagey = int(SCREENHEIGHT*0.13)\r\n-#     basex = 0\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagey = int(SCREENHEIGHT*0.13)\r\n+    basex = 0\r\n \r\n-#     while True:\r\n-#         for event in pygame.event.get():\r\n-#             # if user clicks on cross button, close the game\r\n-#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-#                 pygame.quit()\r\n-#                 sys.exit()\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            # if user clicks on cross button, close the game\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n \r\n-#             # If the user presses space or up key, start the game for them\r\n-#             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-#                 return\r\n+            # If the user presses space or up key, start the game for them\r\n+            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                return\r\n                 \r\n-#             else:\r\n-#                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-#                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-#                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-#                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-#                 pygame.display.update()\r\n-#                 FPSCLOCK.tick(FPS)\r\n+            else:\r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n \r\n-# def mainGame():\r\n-#     score = 0\r\n-#     playerx = int(SCREENWIDTH/5)\r\n-#     playery = int(SCREENWIDTH/2)\r\n-#     basex = 0\r\n+def mainGame():\r\n+    score = 0\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int(SCREENWIDTH/2)\r\n+    basex = 0\r\n \r\n-#     #create 2 pipes for blitting on screen \r\n+    #create 2 pipes for blitting on screen \r\n \r\n-#     newPipe1 = getRandomPipe()\r\n-#     newPipe2 = getRandomPipe()\r\n+    newPipe1 = getRandomPipe()\r\n+    newPipe2 = getRandomPipe()\r\n \r\n-#     # my list of upper and lower pipes\r\n+    # my list of upper and lower pipes\r\n \r\n-#     upperPipes = [\r\n-#         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n-#     ]\r\n+    upperPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n+    ]\r\n \r\n-#     lowerPipes = [\r\n-#         {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-#     ]\r\n+    lowerPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+    ]\r\n \r\n-#     pipeVelX = -4\r\n+    pipeVelX = -4\r\n \r\n-#     playerVelY = -9\r\n-#     playerMaxVelY = 10\r\n-#     playerMinVelY = -8\r\n-#     playerAccY = 1\r\n+    playerVelY = -9\r\n+    playerMaxVelY = 10\r\n+    playerMinVelY = -8\r\n+    playerAccY = 1\r\n \r\n-#     playerFlapAccv = -8     #velocity while flapping\r\n-#     playerFlapped = False  # it is true only when bird is flapping \r\n+    playerFlapAccv = -8     #velocity while flapping\r\n+    playerFlapped = False  # it is true only when bird is flapping \r\n \r\n \r\n-#     while True:\r\n-#         for event in pygame.event.get():\r\n-#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-#                 pygame.quit()\r\n-#                 sys.exit()\r\n-#             if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-#                 if playery > 0 :\r\n-#                     playerVelY = playerFlapAccv\r\n-#                     playerFlapped = True\r\n-#                     GAME_SOUNDS['wing'].play()\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                if playery > 0 :\r\n+                    playerVelY = playerFlapAccv\r\n+                    playerFlapped = True\r\n+                    GAME_SOUNDS['wing'].play()\r\n          \r\n-#         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n-#         if crashTest:\r\n-#             return\r\n+        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+        if crashTest:\r\n+            return\r\n \r\n-#         #check for score \r\n-#         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n-#         for pipe in upperPipes:\r\n-#             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-#             if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n-#                 score +=1\r\n-#                 print(f\"Your score is {score}\")\r\n-#                 GAME_SOUNDS['point'].play()\r\n+        #check for score \r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+        for pipe in upperPipes:\r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+                score +=1\r\n+                print(f\"Your score is {score}\")\r\n+                GAME_SOUNDS['point'].play()\r\n \r\n-#         if playerVelY < playerMaxVelY and not playerFlapped:\r\n-#             playerVelY += playerAccY\r\n+        if playerVelY < playerMaxVelY and not playerFlapped:\r\n+            playerVelY += playerAccY\r\n         \r\n-#         if playerFlapped:\r\n-#             playerFlapped = False\r\n-#         playerHeight =  GAME_SPRITES['player'].get_height()\r\n-#         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+        if playerFlapped:\r\n+            playerFlapped = False\r\n+        playerHeight =  GAME_SPRITES['player'].get_height()\r\n+        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n         \r\n-#         #move pipes to the left\r\n-#         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n-#             upperPipe['x'] += pipeVelX\r\n-#             lowerPipe['x'] += pipeVelX\r\n+        #move pipes to the left\r\n+        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+            upperPipe['x'] += pipeVelX\r\n+            lowerPipe['x'] += pipeVelX\r\n \r\n-#         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n-#         if 0 < upperPipes[0]['x'] < 5:\r\n-#           newpipe = getRandomPipe()\r\n-#           upperPipes.append(newpipe[0])\r\n-#           lowerPipes.append(newpipe[1])\r\n+        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+        if 0 < upperPipes[0]['x'] < 5:\r\n+          newpipe = getRandomPipe()\r\n+          upperPipes.append(newpipe[0])\r\n+          lowerPipes.append(newpipe[1])\r\n  \r\n-#         # if the pipe is out of the screen , remove it \r\n-#         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-#             upperPipes.pop(0)\r\n-#             lowerPipes.pop(0)\r\n+        # if the pipe is out of the screen , remove it \r\n+        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+            upperPipes.pop(0)\r\n+            lowerPipes.pop(0)\r\n         \r\n-#         #lets blit our sprites \r\n-#         SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n-#         for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-#             SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n-#             SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n+        #lets blit our sprites \r\n+        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n+        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n \r\n-#         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n-#         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n-#         myDigits = [int(x) for x in list(str(score))]\r\n-#         width = 0\r\n-#         for digit in myDigits:\r\n-#             width += GAME_SPRITES['numbers'][digit].get_width()\r\n-#         Xoffset = (SCREENWIDTH - width)/2\r\n+        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+        myDigits = [int(x) for x in list(str(score))]\r\n+        width = 0\r\n+        for digit in myDigits:\r\n+            width += GAME_SPRITES['numbers'][digit].get_width()\r\n+        Xoffset = (SCREENWIDTH - width)/2\r\n \r\n-#         for digit in myDigits:\r\n-#             SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n-#             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-#         pygame.display.update()\r\n-#         FPSCLOCK.tick(FPS)\r\n+        for digit in myDigits:\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+        pygame.display.update()\r\n+        FPSCLOCK.tick(FPS)\r\n \r\n-# def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n-#     if playery> GROUNDY - 25  or playery<0:\r\n-#         GAME_SOUNDS['hit'].play()\r\n-#         return True  \r\n+def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n+    if playery> GROUNDY - 25  or playery<0:\r\n+        GAME_SOUNDS['hit'].play()\r\n+        return True  \r\n     \r\n-#     for pipe in upperPipes:\r\n-#         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-#         if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n-#            GAME_SOUNDS['hit'].play()\r\n-#            return True\r\n+    for pipe in upperPipes:\r\n+        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+        if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n+           GAME_SOUNDS['hit'].play()\r\n+           return True\r\n \r\n-#     for pipe in lowerPipes:\r\n-#         if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-#             GAME_SOUNDS['hit'].play()\r\n-#             return True\r\n+    for pipe in lowerPipes:\r\n+        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n \r\n-#     return False\r\n+    return False\r\n \r\n-# def getRandomPipe():\r\n-#     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n-#     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n-#     offset = SCREENHEIGHT/3\r\n-#     y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n-#     pipeX = SCREENWIDTH + 10\r\n-#     y1 = pipeheight - y2 + offset\r\n-#     pipe = [\r\n-#         {'x':pipeX, 'y':-y1},   #upper pipe\r\n-#         {'x':pipeX, 'y':y2}    #lower pipe\r\n+def getRandomPipe():\r\n+    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n+    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+    offset = SCREENHEIGHT/3\r\n+    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    pipeX = SCREENWIDTH + 10\r\n+    y1 = pipeheight - y2 + offset\r\n+    pipe = [\r\n+        {'x':pipeX, 'y':-y1},   #upper pipe\r\n+        {'x':pipeX, 'y':y2}    #lower pipe\r\n \r\n-#         ]\r\n-#     return pipe    \r\n+        ]\r\n+    return pipe    \r\n     \r\n     \r\n \r\n \r\n \r\n-# if __name__==\"__main__\":      #this will be main point from where game will start\r\n+if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n-#     pygame.init()             #ini pygame module\r\n-#     FPSCLOCK = pygame.time.Clock()    \r\n-#     pygame.display.set_caption('Flappy Bird by Sana')\r\n-#     GAME_SPRITES['numbers'] = (\r\n-#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-#     )\r\n+    pygame.init()             #ini pygame module\r\n+    FPSCLOCK = pygame.time.Clock()    \r\n+    pygame.display.set_caption('Flappy Bird by Sana')\r\n+    GAME_SPRITES['numbers'] = (\r\n+        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+    )\r\n \r\n-#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-#     pygame.image.load(PIPE).convert_alpha()\r\n-#     )\r\n+    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+    pygame.image.load(PIPE).convert_alpha()\r\n+    )\r\n \r\n \r\n-#     #game sounds\r\n+    #game sounds\r\n \r\n-#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n \r\n-#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n-#     while True:\r\n-#         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-#         mainGame()       #this is the main game func\r\n+    while True:\r\n+        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+        mainGame()       #this is the main game func\r\n \r\n+\r\n+\r\n+import random\r\n+import pygame\r\n+import sys\r\n+from pygame.locals import *\r\n+\r\n+# Initialize Pygame\r\n+pygame.init()\r\n+\r\n+# Global Variables\r\n+SCREEN_WIDTH = 400\r\n+SCREEN_HEIGHT = 600\r\n+SCREEN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\r\n+FPS = 30\r\n+GROUND_Y = SCREEN_HEIGHT * 0.8\r\n+\r\n+# Load images\r\n+BACKGROUND = pygame.image.load('gallery/sprites/background.png')\r\n+BIRD = pygame.image.load('gallery/sprites/bird.png')\r\n+PIPE = pygame.image.load('gallery/sprites/pipe.png')\r\n+BASE = pygame.image.load('gallery/sprites/base.png')\r\n+\r\n+def get_random_pipe():\r\n+    \"\"\"Return a randomly generated pair of pipes (upper and lower)\"\"\"\r\n+    pipe_height = PIPE.get_height()\r\n+    offset = SCREEN_HEIGHT / 3\r\n+    y2 = offset + random.randrange(0, int(SCREEN_HEIGHT - BASE.get_height() - 1.5 * offset))\r\n+    pipe_x = SCREEN_WIDTH + 10\r\n+    y1 = pipe_height - y2 + offset\r\n+    return [{'x': pipe_x, 'y': -y1}, {'x': pipe_x, 'y': y2}]\r\n+\r\n+def is_collide(bird_x, bird_y, upper_pipes, lower_pipes):\r\n+    \"\"\"Check for collisions\"\"\"\r\n+    bird_width = BIRD.get_width()\r\n+    bird_height = BIRD.get_height()\r\n+\r\n+    if bird_y > GROUND_Y - bird_height or bird_y < 0:\r\n+        return True\r\n+\r\n+    for pipe in upper_pipes:\r\n+        pipe_width = PIPE.get_width()\r\n+        pipe_height = PIPE.get_height()\r\n+        if (bird_x + bird_width > pipe['x'] and\r\n+            bird_x < pipe['x'] + pipe_width and\r\n+            bird_y < pipe['y'] + pipe_height):\r\n+            return True\r\n+\r\n+    for pipe in lower_pipes:\r\n+        pipe_width = PIPE.get_width()\r\n+        if (bird_x + bird_width > pipe['x'] and\r\n+            bird_x < pipe['x'] + pipe_width and\r\n+            bird_y + bird_height > pipe['y']):\r\n+            return True\r\n+\r\n+    return False\r\n+\r\n+def main_game():\r\n+    bird_x = SCREEN_WIDTH // 5\r\n+    bird_y = SCREEN_HEIGHT // 2\r\n+    bird_velocity_y = 0\r\n+    bird_acceleration_y = 0.5\r\n+    bird_flap_velocity = -10\r\n+    bird_flapped = False\r\n+\r\n+    # Initialize pipes\r\n+    upper_pipes = []\r\n+    lower_pipes = []\r\n+\r\n+    # Add initial pipes\r\n+    new_pipe1 = get_random_pipe()\r\n+    new_pipe2 = get_random_pipe()\r\n+\r\n+    upper_pipes = [\r\n+        {'x': SCREEN_WIDTH + 200, 'y': new_pipe1[0]['y']},\r\n+        {'x': SCREEN_WIDTH + 200 + (SCREEN_WIDTH / 2), 'y': new_pipe2[0]['y']},\r\n+    ]\r\n+    lower_pipes = [\r\n+        {'x': SCREEN_WIDTH + 200, 'y': new_pipe1[1]['y']},\r\n+        {'x': SCREEN_WIDTH + 200 + (SCREEN_WIDTH / 2), 'y': new_pipe2[1]['y']},\r\n+    ]\r\n+\r\n+    pipe_velocity_x = -4\r\n+    base_x = 0\r\n+    score = 0\r\n+\r\n+    clock = pygame.time.Clock()\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+\r\n+            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n+                if bird_y > 0:\r\n+                    bird_velocity_y = bird_flap_velocity\r\n+                    bird_flapped = True\r\n+\r\n+        # Bird movement\r\n+        bird_velocity_y += bird_acceleration_y\r\n+        bird_y = bird_y + min(bird_velocity_y, GROUND_Y - bird_y - BIRD.get_height())\r\n+\r\n+        # Move pipes\r\n+        for upper_pipe, lower_pipe in zip(upper_pipes, lower_pipes):\r\n+            upper_pipe['x'] += pipe_velocity_x\r\n+            lower_pipe['x'] += pipe_velocity_x\r\n+\r\n+        # Add new pipes if needed\r\n+        if upper_pipes and 0 < upper_pipes[0]['x'] < 5:\r\n+            new_pipe = get_random_pipe()\r\n+            upper_pipes.append(new_pipe[0])\r\n+            lower_pipes.append(new_pipe[1])\r\n+\r\n+        # Remove pipes that go off-screen\r\n+        if upper_pipes and upper_pipes[0]['x'] < -PIPE.get_width():\r\n+            upper_pipes.pop(0)\r\n+            lower_pipes.pop(0)\r\n+\r\n+        # Check for collisions\r\n+        if is_collide(bird_x, bird_y, upper_pipes, lower_pipes):\r\n+            print(\"Collision detected!\")\r\n+            break  # End the game if there is a collision\r\n+\r\n+        # Draw everything on the screen\r\n+        SCREEN.blit(BACKGROUND, (0, 0))\r\n+        for upper_pipe, lower_pipe in zip(upper_pipes, lower_pipes):\r\n+            SCREEN.blit(pygame.transform.rotate(PIPE, 180), (upper_pipe['x'], upper_pipe['y']))\r\n+            SCREEN.blit(PIPE, (lower_pipe['x'], lower_pipe['y']))\r\n+\r\n+        SCREEN.blit(BASE, (base_x, GROUND_Y))\r\n+        SCREEN.blit(BIRD, (bird_x, bird_y))\r\n+\r\n+        pygame.display.update()\r\n+        clock.tick(FPS)\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main_game()\r\n"
                },
                {
                    "date": 1726656537939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,231 +1,231 @@\n-import random  #for generating random nos\r\n-import sys     #for exit \r\n-import pygame\r\n-from   pygame.locals import *  #basic pygame imports\r\n+# import random  #for generating random nos\r\n+# import sys     #for exit \r\n+# import pygame\r\n+# from   pygame.locals import *  #basic pygame imports\r\n \r\n-#global var\r\n-FPS = 32\r\n-SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n-SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.8\r\n-GAME_SPRITES = {}\r\n-GAME_SOUNDS = {}\r\n+# #global var\r\n+# FPS = 32\r\n+# SCREENWIDTH = 289\r\n+# SCREENHEIGHT = 511\r\n+# SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+# GROUNDY = SCREENHEIGHT * 0.8\r\n+# GAME_SPRITES = {}\r\n+# GAME_SOUNDS = {}\r\n \r\n-#These 3 are separate becoz i want to make them global var \r\n-PLAYER = 'gallery/sprites/bird.png'\r\n-BACKGROUND = 'gallery/sprites/background.png'\r\n-PIPE = 'gallery/sprites/pipe.png'\r\n+# #These 3 are separate becoz i want to make them global var \r\n+# PLAYER = 'gallery/sprites/bird.png'\r\n+# BACKGROUND = 'gallery/sprites/background.png'\r\n+# PIPE = 'gallery/sprites/pipe.png'\r\n \r\n \r\n-def welcomeScreen():\r\n-    \"\"\"\r\n-    Shows welcome images on the screen\r\n-    \"\"\"\r\n+# def welcomeScreen():\r\n+#     \"\"\"\r\n+#     Shows welcome images on the screen\r\n+#     \"\"\"\r\n \r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-    messagey = int(SCREENHEIGHT*0.13)\r\n-    basex = 0\r\n+#     playerx = int(SCREENWIDTH/5)\r\n+#     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+#     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+#     messagey = int(SCREENHEIGHT*0.13)\r\n+#     basex = 0\r\n \r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n+#     while True:\r\n+#         for event in pygame.event.get():\r\n+#             # if user clicks on cross button, close the game\r\n+#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+#                 pygame.quit()\r\n+#                 sys.exit()\r\n \r\n-            # If the user presses space or up key, start the game for them\r\n-            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                return\r\n+#             # If the user presses space or up key, start the game for them\r\n+#             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+#                 return\r\n                 \r\n-            else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-                pygame.display.update()\r\n-                FPSCLOCK.tick(FPS)\r\n+#             else:\r\n+#                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+#                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+#                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+#                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+#                 pygame.display.update()\r\n+#                 FPSCLOCK.tick(FPS)\r\n \r\n-def mainGame():\r\n-    score = 0\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int(SCREENWIDTH/2)\r\n-    basex = 0\r\n+# def mainGame():\r\n+#     score = 0\r\n+#     playerx = int(SCREENWIDTH/5)\r\n+#     playery = int(SCREENWIDTH/2)\r\n+#     basex = 0\r\n \r\n-    #create 2 pipes for blitting on screen \r\n+#     #create 2 pipes for blitting on screen \r\n \r\n-    newPipe1 = getRandomPipe()\r\n-    newPipe2 = getRandomPipe()\r\n+#     newPipe1 = getRandomPipe()\r\n+#     newPipe2 = getRandomPipe()\r\n \r\n-    # my list of upper and lower pipes\r\n+#     # my list of upper and lower pipes\r\n \r\n-    upperPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n-    ]\r\n+#     upperPipes = [\r\n+#         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n+#     ]\r\n \r\n-    lowerPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-    ]\r\n+#     lowerPipes = [\r\n+#         {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+#     ]\r\n \r\n-    pipeVelX = -4\r\n+#     pipeVelX = -4\r\n \r\n-    playerVelY = -9\r\n-    playerMaxVelY = 10\r\n-    playerMinVelY = -8\r\n-    playerAccY = 1\r\n+#     playerVelY = -9\r\n+#     playerMaxVelY = 10\r\n+#     playerMinVelY = -8\r\n+#     playerAccY = 1\r\n \r\n-    playerFlapAccv = -8     #velocity while flapping\r\n-    playerFlapped = False  # it is true only when bird is flapping \r\n+#     playerFlapAccv = -8     #velocity while flapping\r\n+#     playerFlapped = False  # it is true only when bird is flapping \r\n \r\n \r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                if playery > 0 :\r\n-                    playerVelY = playerFlapAccv\r\n-                    playerFlapped = True\r\n-                    GAME_SOUNDS['wing'].play()\r\n+#     while True:\r\n+#         for event in pygame.event.get():\r\n+#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+#                 pygame.quit()\r\n+#                 sys.exit()\r\n+#             if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+#                 if playery > 0 :\r\n+#                     playerVelY = playerFlapAccv\r\n+#                     playerFlapped = True\r\n+#                     GAME_SOUNDS['wing'].play()\r\n          \r\n-        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n-        if crashTest:\r\n-            return\r\n+#         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+#         if crashTest:\r\n+#             return\r\n \r\n-        #check for score \r\n-        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n-        for pipe in upperPipes:\r\n-            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n-                score +=1\r\n-                print(f\"Your score is {score}\")\r\n-                GAME_SOUNDS['point'].play()\r\n+#         #check for score \r\n+#         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+#         for pipe in upperPipes:\r\n+#             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+#             if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+#                 score +=1\r\n+#                 print(f\"Your score is {score}\")\r\n+#                 GAME_SOUNDS['point'].play()\r\n \r\n-        if playerVelY < playerMaxVelY and not playerFlapped:\r\n-            playerVelY += playerAccY\r\n+#         if playerVelY < playerMaxVelY and not playerFlapped:\r\n+#             playerVelY += playerAccY\r\n         \r\n-        if playerFlapped:\r\n-            playerFlapped = False\r\n-        playerHeight =  GAME_SPRITES['player'].get_height()\r\n-        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+#         if playerFlapped:\r\n+#             playerFlapped = False\r\n+#         playerHeight =  GAME_SPRITES['player'].get_height()\r\n+#         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n         \r\n-        #move pipes to the left\r\n-        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n-            upperPipe['x'] += pipeVelX\r\n-            lowerPipe['x'] += pipeVelX\r\n+#         #move pipes to the left\r\n+#         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+#             upperPipe['x'] += pipeVelX\r\n+#             lowerPipe['x'] += pipeVelX\r\n \r\n-        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n-        if 0 < upperPipes[0]['x'] < 5:\r\n-          newpipe = getRandomPipe()\r\n-          upperPipes.append(newpipe[0])\r\n-          lowerPipes.append(newpipe[1])\r\n+#         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+#         if 0 < upperPipes[0]['x'] < 5:\r\n+#           newpipe = getRandomPipe()\r\n+#           upperPipes.append(newpipe[0])\r\n+#           lowerPipes.append(newpipe[1])\r\n  \r\n-        # if the pipe is out of the screen , remove it \r\n-        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-            upperPipes.pop(0)\r\n-            lowerPipes.pop(0)\r\n+#         # if the pipe is out of the screen , remove it \r\n+#         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+#             upperPipes.pop(0)\r\n+#             lowerPipes.pop(0)\r\n         \r\n-        #lets blit our sprites \r\n-        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n-        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n+#         #lets blit our sprites \r\n+#         SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n+#         for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n+#             SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n+#             SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n \r\n-        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n-        myDigits = [int(x) for x in list(str(score))]\r\n-        width = 0\r\n-        for digit in myDigits:\r\n-            width += GAME_SPRITES['numbers'][digit].get_width()\r\n-        Xoffset = (SCREENWIDTH - width)/2\r\n+#         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n+#         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+#         myDigits = [int(x) for x in list(str(score))]\r\n+#         width = 0\r\n+#         for digit in myDigits:\r\n+#             width += GAME_SPRITES['numbers'][digit].get_width()\r\n+#         Xoffset = (SCREENWIDTH - width)/2\r\n \r\n-        for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n-            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-        pygame.display.update()\r\n-        FPSCLOCK.tick(FPS)\r\n+#         for digit in myDigits:\r\n+#             SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+#             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+#         pygame.display.update()\r\n+#         FPSCLOCK.tick(FPS)\r\n \r\n-def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n-    if playery> GROUNDY - 25  or playery<0:\r\n-        GAME_SOUNDS['hit'].play()\r\n-        return True  \r\n+# def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n+#     if playery> GROUNDY - 25  or playery<0:\r\n+#         GAME_SOUNDS['hit'].play()\r\n+#         return True  \r\n     \r\n-    for pipe in upperPipes:\r\n-        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-        if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n-           GAME_SOUNDS['hit'].play()\r\n-           return True\r\n+#     for pipe in upperPipes:\r\n+#         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+#         if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n+#            GAME_SOUNDS['hit'].play()\r\n+#            return True\r\n \r\n-    for pipe in lowerPipes:\r\n-        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-            GAME_SOUNDS['hit'].play()\r\n-            return True\r\n+#     for pipe in lowerPipes:\r\n+#         if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+#             GAME_SOUNDS['hit'].play()\r\n+#             return True\r\n \r\n-    return False\r\n+#     return False\r\n \r\n-def getRandomPipe():\r\n-    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n-    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT/3\r\n-    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n-    pipeX = SCREENWIDTH + 10\r\n-    y1 = pipeheight - y2 + offset\r\n-    pipe = [\r\n-        {'x':pipeX, 'y':-y1},   #upper pipe\r\n-        {'x':pipeX, 'y':y2}    #lower pipe\r\n+# def getRandomPipe():\r\n+#     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n+#     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+#     offset = SCREENHEIGHT/3\r\n+#     y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+#     pipeX = SCREENWIDTH + 10\r\n+#     y1 = pipeheight - y2 + offset\r\n+#     pipe = [\r\n+#         {'x':pipeX, 'y':-y1},   #upper pipe\r\n+#         {'x':pipeX, 'y':y2}    #lower pipe\r\n \r\n-        ]\r\n-    return pipe    \r\n+#         ]\r\n+#     return pipe    \r\n     \r\n     \r\n \r\n \r\n \r\n-if __name__==\"__main__\":      #this will be main point from where game will start\r\n+# if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n-    pygame.init()             #ini pygame module\r\n-    FPSCLOCK = pygame.time.Clock()    \r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n-    GAME_SPRITES['numbers'] = (\r\n-        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-    )\r\n+#     pygame.init()             #ini pygame module\r\n+#     FPSCLOCK = pygame.time.Clock()    \r\n+#     pygame.display.set_caption('Flappy Bird by Sana')\r\n+#     GAME_SPRITES['numbers'] = (\r\n+#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+#     )\r\n \r\n-    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-    pygame.image.load(PIPE).convert_alpha()\r\n-    )\r\n+#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+#     pygame.image.load(PIPE).convert_alpha()\r\n+#     )\r\n \r\n \r\n-    #game sounds\r\n+#     #game sounds\r\n \r\n-    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n \r\n-    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n \r\n-    while True:\r\n-        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-        mainGame()       #this is the main game func\r\n+#     while True:\r\n+#         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+#         mainGame()       #this is the main game func\r\n \r\n \r\n \r\n import random\r\n"
                },
                {
                    "date": 1726656952457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,366 +0,0 @@\n-# import random  #for generating random nos\r\n-# import sys     #for exit \r\n-# import pygame\r\n-# from   pygame.locals import *  #basic pygame imports\r\n-\r\n-# #global var\r\n-# FPS = 32\r\n-# SCREENWIDTH = 289\r\n-# SCREENHEIGHT = 511\r\n-# SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-# GROUNDY = SCREENHEIGHT * 0.8\r\n-# GAME_SPRITES = {}\r\n-# GAME_SOUNDS = {}\r\n-\r\n-# #These 3 are separate becoz i want to make them global var \r\n-# PLAYER = 'gallery/sprites/bird.png'\r\n-# BACKGROUND = 'gallery/sprites/background.png'\r\n-# PIPE = 'gallery/sprites/pipe.png'\r\n-\r\n-\r\n-# def welcomeScreen():\r\n-#     \"\"\"\r\n-#     Shows welcome images on the screen\r\n-#     \"\"\"\r\n-\r\n-#     playerx = int(SCREENWIDTH/5)\r\n-#     playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-#     messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-#     messagey = int(SCREENHEIGHT*0.13)\r\n-#     basex = 0\r\n-\r\n-#     while True:\r\n-#         for event in pygame.event.get():\r\n-#             # if user clicks on cross button, close the game\r\n-#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-#                 pygame.quit()\r\n-#                 sys.exit()\r\n-\r\n-#             # If the user presses space or up key, start the game for them\r\n-#             elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-#                 return\r\n-                \r\n-#             else:\r\n-#                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-#                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-#                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-#                 SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-#                 pygame.display.update()\r\n-#                 FPSCLOCK.tick(FPS)\r\n-\r\n-# def mainGame():\r\n-#     score = 0\r\n-#     playerx = int(SCREENWIDTH/5)\r\n-#     playery = int(SCREENWIDTH/2)\r\n-#     basex = 0\r\n-\r\n-#     #create 2 pipes for blitting on screen \r\n-\r\n-#     newPipe1 = getRandomPipe()\r\n-#     newPipe2 = getRandomPipe()\r\n-\r\n-#     # my list of upper and lower pipes\r\n-\r\n-#     upperPipes = [\r\n-#         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n-#     ]\r\n-\r\n-#     lowerPipes = [\r\n-#         {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-#         {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-#     ]\r\n-\r\n-#     pipeVelX = -4\r\n-\r\n-#     playerVelY = -9\r\n-#     playerMaxVelY = 10\r\n-#     playerMinVelY = -8\r\n-#     playerAccY = 1\r\n-\r\n-#     playerFlapAccv = -8     #velocity while flapping\r\n-#     playerFlapped = False  # it is true only when bird is flapping \r\n-\r\n-\r\n-#     while True:\r\n-#         for event in pygame.event.get():\r\n-#             if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-#                 pygame.quit()\r\n-#                 sys.exit()\r\n-#             if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-#                 if playery > 0 :\r\n-#                     playerVelY = playerFlapAccv\r\n-#                     playerFlapped = True\r\n-#                     GAME_SOUNDS['wing'].play()\r\n-         \r\n-#         crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n-#         if crashTest:\r\n-#             return\r\n-\r\n-#         #check for score \r\n-#         playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n-#         for pipe in upperPipes:\r\n-#             pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-#             if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n-#                 score +=1\r\n-#                 print(f\"Your score is {score}\")\r\n-#                 GAME_SOUNDS['point'].play()\r\n-\r\n-#         if playerVelY < playerMaxVelY and not playerFlapped:\r\n-#             playerVelY += playerAccY\r\n-        \r\n-#         if playerFlapped:\r\n-#             playerFlapped = False\r\n-#         playerHeight =  GAME_SPRITES['player'].get_height()\r\n-#         playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n-        \r\n-#         #move pipes to the left\r\n-#         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n-#             upperPipe['x'] += pipeVelX\r\n-#             lowerPipe['x'] += pipeVelX\r\n-\r\n-#         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n-#         if 0 < upperPipes[0]['x'] < 5:\r\n-#           newpipe = getRandomPipe()\r\n-#           upperPipes.append(newpipe[0])\r\n-#           lowerPipes.append(newpipe[1])\r\n- \r\n-#         # if the pipe is out of the screen , remove it \r\n-#         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-#             upperPipes.pop(0)\r\n-#             lowerPipes.pop(0)\r\n-        \r\n-#         #lets blit our sprites \r\n-#         SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n-#         for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-#             SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n-#             SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n-\r\n-#         SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n-#         SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n-#         myDigits = [int(x) for x in list(str(score))]\r\n-#         width = 0\r\n-#         for digit in myDigits:\r\n-#             width += GAME_SPRITES['numbers'][digit].get_width()\r\n-#         Xoffset = (SCREENWIDTH - width)/2\r\n-\r\n-#         for digit in myDigits:\r\n-#             SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n-#             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-#         pygame.display.update()\r\n-#         FPSCLOCK.tick(FPS)\r\n-\r\n-# def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n-#     if playery> GROUNDY - 25  or playery<0:\r\n-#         GAME_SOUNDS['hit'].play()\r\n-#         return True  \r\n-    \r\n-#     for pipe in upperPipes:\r\n-#         pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-#         if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n-#            GAME_SOUNDS['hit'].play()\r\n-#            return True\r\n-\r\n-#     for pipe in lowerPipes:\r\n-#         if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-#             GAME_SOUNDS['hit'].play()\r\n-#             return True\r\n-\r\n-#     return False\r\n-\r\n-# def getRandomPipe():\r\n-#     # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n-#     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n-#     offset = SCREENHEIGHT/3\r\n-#     y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n-#     pipeX = SCREENWIDTH + 10\r\n-#     y1 = pipeheight - y2 + offset\r\n-#     pipe = [\r\n-#         {'x':pipeX, 'y':-y1},   #upper pipe\r\n-#         {'x':pipeX, 'y':y2}    #lower pipe\r\n-\r\n-#         ]\r\n-#     return pipe    \r\n-    \r\n-    \r\n-\r\n-\r\n-\r\n-# if __name__==\"__main__\":      #this will be main point from where game will start\r\n-    \r\n-#     pygame.init()             #ini pygame module\r\n-#     FPSCLOCK = pygame.time.Clock()    \r\n-#     pygame.display.set_caption('Flappy Bird by Sana')\r\n-#     GAME_SPRITES['numbers'] = (\r\n-#         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-#         pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-#     )\r\n-\r\n-#     GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-#     GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-#     GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-#     pygame.image.load(PIPE).convert_alpha()\r\n-#     )\r\n-\r\n-\r\n-#     #game sounds\r\n-\r\n-#     GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-#     GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-#     GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-#     GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-#     GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-#     GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-#     GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-#     while True:\r\n-#         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-#         mainGame()       #this is the main game func\r\n-\r\n-\r\n-\r\n-import random\r\n-import pygame\r\n-import sys\r\n-from pygame.locals import *\r\n-\r\n-# Initialize Pygame\r\n-pygame.init()\r\n-\r\n-# Global Variables\r\n-SCREEN_WIDTH = 400\r\n-SCREEN_HEIGHT = 600\r\n-SCREEN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\r\n-FPS = 30\r\n-GROUND_Y = SCREEN_HEIGHT * 0.8\r\n-\r\n-# Load images\r\n-BACKGROUND = pygame.image.load('gallery/sprites/background.png')\r\n-BIRD = pygame.image.load('gallery/sprites/bird.png')\r\n-PIPE = pygame.image.load('gallery/sprites/pipe.png')\r\n-BASE = pygame.image.load('gallery/sprites/base.png')\r\n-\r\n-def get_random_pipe():\r\n-    \"\"\"Return a randomly generated pair of pipes (upper and lower)\"\"\"\r\n-    pipe_height = PIPE.get_height()\r\n-    offset = SCREEN_HEIGHT / 3\r\n-    y2 = offset + random.randrange(0, int(SCREEN_HEIGHT - BASE.get_height() - 1.5 * offset))\r\n-    pipe_x = SCREEN_WIDTH + 10\r\n-    y1 = pipe_height - y2 + offset\r\n-    return [{'x': pipe_x, 'y': -y1}, {'x': pipe_x, 'y': y2}]\r\n-\r\n-def is_collide(bird_x, bird_y, upper_pipes, lower_pipes):\r\n-    \"\"\"Check for collisions\"\"\"\r\n-    bird_width = BIRD.get_width()\r\n-    bird_height = BIRD.get_height()\r\n-\r\n-    if bird_y > GROUND_Y - bird_height or bird_y < 0:\r\n-        return True\r\n-\r\n-    for pipe in upper_pipes:\r\n-        pipe_width = PIPE.get_width()\r\n-        pipe_height = PIPE.get_height()\r\n-        if (bird_x + bird_width > pipe['x'] and\r\n-            bird_x < pipe['x'] + pipe_width and\r\n-            bird_y < pipe['y'] + pipe_height):\r\n-            return True\r\n-\r\n-    for pipe in lower_pipes:\r\n-        pipe_width = PIPE.get_width()\r\n-        if (bird_x + bird_width > pipe['x'] and\r\n-            bird_x < pipe['x'] + pipe_width and\r\n-            bird_y + bird_height > pipe['y']):\r\n-            return True\r\n-\r\n-    return False\r\n-\r\n-def main_game():\r\n-    bird_x = SCREEN_WIDTH // 5\r\n-    bird_y = SCREEN_HEIGHT // 2\r\n-    bird_velocity_y = 0\r\n-    bird_acceleration_y = 0.5\r\n-    bird_flap_velocity = -10\r\n-    bird_flapped = False\r\n-\r\n-    # Initialize pipes\r\n-    upper_pipes = []\r\n-    lower_pipes = []\r\n-\r\n-    # Add initial pipes\r\n-    new_pipe1 = get_random_pipe()\r\n-    new_pipe2 = get_random_pipe()\r\n-\r\n-    upper_pipes = [\r\n-        {'x': SCREEN_WIDTH + 200, 'y': new_pipe1[0]['y']},\r\n-        {'x': SCREEN_WIDTH + 200 + (SCREEN_WIDTH / 2), 'y': new_pipe2[0]['y']},\r\n-    ]\r\n-    lower_pipes = [\r\n-        {'x': SCREEN_WIDTH + 200, 'y': new_pipe1[1]['y']},\r\n-        {'x': SCREEN_WIDTH + 200 + (SCREEN_WIDTH / 2), 'y': new_pipe2[1]['y']},\r\n-    ]\r\n-\r\n-    pipe_velocity_x = -4\r\n-    base_x = 0\r\n-    score = 0\r\n-\r\n-    clock = pygame.time.Clock()\r\n-\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-\r\n-            if event.type == KEYDOWN and (event.key == K_SPACE or event.key == K_UP):\r\n-                if bird_y > 0:\r\n-                    bird_velocity_y = bird_flap_velocity\r\n-                    bird_flapped = True\r\n-\r\n-        # Bird movement\r\n-        bird_velocity_y += bird_acceleration_y\r\n-        bird_y = bird_y + min(bird_velocity_y, GROUND_Y - bird_y - BIRD.get_height())\r\n-\r\n-        # Move pipes\r\n-        for upper_pipe, lower_pipe in zip(upper_pipes, lower_pipes):\r\n-            upper_pipe['x'] += pipe_velocity_x\r\n-            lower_pipe['x'] += pipe_velocity_x\r\n-\r\n-        # Add new pipes if needed\r\n-        if upper_pipes and 0 < upper_pipes[0]['x'] < 5:\r\n-            new_pipe = get_random_pipe()\r\n-            upper_pipes.append(new_pipe[0])\r\n-            lower_pipes.append(new_pipe[1])\r\n-\r\n-        # Remove pipes that go off-screen\r\n-        if upper_pipes and upper_pipes[0]['x'] < -PIPE.get_width():\r\n-            upper_pipes.pop(0)\r\n-            lower_pipes.pop(0)\r\n-\r\n-        # Check for collisions\r\n-        if is_collide(bird_x, bird_y, upper_pipes, lower_pipes):\r\n-            print(\"Collision detected!\")\r\n-            break  # End the game if there is a collision\r\n-\r\n-        # Draw everything on the screen\r\n-        SCREEN.blit(BACKGROUND, (0, 0))\r\n-        for upper_pipe, lower_pipe in zip(upper_pipes, lower_pipes):\r\n-            SCREEN.blit(pygame.transform.rotate(PIPE, 180), (upper_pipe['x'], upper_pipe['y']))\r\n-            SCREEN.blit(PIPE, (lower_pipe['x'], lower_pipe['y']))\r\n-\r\n-        SCREEN.blit(BASE, (base_x, GROUND_Y))\r\n-        SCREEN.blit(BIRD, (bird_x, bird_y))\r\n-\r\n-        pygame.display.update()\r\n-        clock.tick(FPS)\r\n-\r\n-if __name__ == \"__main__\":\r\n-    main_game()\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726656982587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,228 @@\n-\n+import random  #for generating random nos\r\n+import sys     #for exit \r\n+import pygame\r\n+from   pygame.locals import *  #basic pygame imports\r\n+\r\n+#global var\r\n+FPS = 32\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n+SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+GROUNDY = SCREENHEIGHT * 0.8\r\n+GAME_SPRITES = {}\r\n+GAME_SOUNDS = {}\r\n+\r\n+#These 3 are separate becoz i want to make them global var \r\n+PLAYER = 'gallery/sprites/bird.png'\r\n+BACKGROUND = 'gallery/sprites/background.png'\r\n+PIPE = 'gallery/sprites/pipe.png'\r\n+\r\n+\r\n+def welcomeScreen():\r\n+    \"\"\"\r\n+    Shows welcome images on the screen\r\n+    \"\"\"\r\n+\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagey = int(SCREENHEIGHT*0.13)\r\n+    basex = 0\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            # if user clicks on cross button, close the game\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+\r\n+            # If the user presses space or up key, start the game for them\r\n+            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                return\r\n+                \r\n+            else:\r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n+\r\n+def mainGame():\r\n+    score = 0\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int(SCREENWIDTH/2)\r\n+    basex = 0\r\n+\r\n+    #create 2 pipes for blitting on screen \r\n+\r\n+    newPipe1 = getRandomPipe()\r\n+    newPipe2 = getRandomPipe()\r\n+\r\n+    # my list of upper and lower pipes\r\n+\r\n+    upperPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n+    ]\r\n+\r\n+    lowerPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+    ]\r\n+\r\n+    pipeVelX = -4\r\n+\r\n+    playerVelY = -9\r\n+    playerMaxVelY = 10\r\n+    playerMinVelY = -8\r\n+    playerAccY = 1\r\n+\r\n+    playerFlapAccv = -8     #velocity while flapping\r\n+    playerFlapped = False  # it is true only when bird is flapping \r\n+\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                if playery > 0 :\r\n+                    playerVelY = playerFlapAccv\r\n+                    playerFlapped = True\r\n+                    GAME_SOUNDS['wing'].play()\r\n+         \r\n+        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+        if crashTest:\r\n+            return\r\n+\r\n+        #check for score \r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+        for pipe in upperPipes:\r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+                score +=1\r\n+                print(f\"Your score is {score}\")\r\n+                GAME_SOUNDS['point'].play()\r\n+\r\n+        if playerVelY < playerMaxVelY and not playerFlapped:\r\n+            playerVelY += playerAccY\r\n+        \r\n+        if playerFlapped:\r\n+            playerFlapped = False\r\n+        playerHeight =  GAME_SPRITES['player'].get_height()\r\n+        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+        \r\n+        #move pipes to the left\r\n+        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+            upperPipe['x'] += pipeVelX\r\n+            lowerPipe['x'] += pipeVelX\r\n+\r\n+        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+        if 0 < upperPipes[0]['x'] < 5:\r\n+          newpipe = getRandomPipe()\r\n+          upperPipes.append(newpipe[0])\r\n+          lowerPipes.append(newpipe[1])\r\n+ \r\n+        # if the pipe is out of the screen , remove it \r\n+        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+            upperPipes.pop(0)\r\n+            lowerPipes.pop(0)\r\n+        \r\n+        #lets blit our sprites \r\n+        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n+        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n+\r\n+        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+        myDigits = [int(x) for x in list(str(score))]\r\n+        width = 0\r\n+        for digit in myDigits:\r\n+            width += GAME_SPRITES['numbers'][digit].get_width()\r\n+        Xoffset = (SCREENWIDTH - width)/2\r\n+\r\n+        for digit in myDigits:\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+        pygame.display.update()\r\n+        FPSCLOCK.tick(FPS)\r\n+\r\n+def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n+    if playery> GROUNDY - 25  or playery<0:\r\n+        GAME_SOUNDS['hit'].play()\r\n+        return True  \r\n+    \r\n+    for pipe in upperPipes:\r\n+        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n+        if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n+           GAME_SOUNDS['hit'].play()\r\n+           return True\r\n+\r\n+    for pipe in lowerPipes:\r\n+        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n+\r\n+    return False\r\n+\r\n+def getRandomPipe():\r\n+    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n+    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+    offset = SCREENHEIGHT/3\r\n+    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    pipeX = SCREENWIDTH + 10\r\n+    y1 = pipeheight - y2 + offset\r\n+    pipe = [\r\n+        {'x':pipeX, 'y':-y1},   #upper pipe\r\n+        {'x':pipeX, 'y':y2}    #lower pipe\r\n+\r\n+        ]\r\n+    return pipe    \r\n+    \r\n+    \r\n+\r\n+\r\n+\r\n+if __name__==\"__main__\":      #this will be main point from where game will start\r\n+    \r\n+    pygame.init()             #ini pygame module\r\n+    FPSCLOCK = pygame.time.Clock()    \r\n+    pygame.display.set_caption('Flappy Bird by Sana')\r\n+    GAME_SPRITES['numbers'] = (\r\n+        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+    )\r\n+\r\n+    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+    pygame.image.load(PIPE).convert_alpha()\r\n+    )\r\n+\r\n+\r\n+    #game sounds\r\n+\r\n+    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+\r\n+    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+\r\n+    while True:\r\n+        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+        mainGame()       #this is the main game func\r\n+\r\n"
                },
                {
                    "date": 1726666438587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,228 +0,0 @@\n-import random  #for generating random nos\r\n-import sys     #for exit \r\n-import pygame\r\n-from   pygame.locals import *  #basic pygame imports\r\n-\r\n-#global var\r\n-FPS = 32\r\n-SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n-SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.8\r\n-GAME_SPRITES = {}\r\n-GAME_SOUNDS = {}\r\n-\r\n-#These 3 are separate becoz i want to make them global var \r\n-PLAYER = 'gallery/sprites/bird.png'\r\n-BACKGROUND = 'gallery/sprites/background.png'\r\n-PIPE = 'gallery/sprites/pipe.png'\r\n-\r\n-\r\n-def welcomeScreen():\r\n-    \"\"\"\r\n-    Shows welcome images on the screen\r\n-    \"\"\"\r\n-\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-    messagey = int(SCREENHEIGHT*0.13)\r\n-    basex = 0\r\n-\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-\r\n-            # If the user presses space or up key, start the game for them\r\n-            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                return\r\n-                \r\n-            else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-                pygame.display.update()\r\n-                FPSCLOCK.tick(FPS)\r\n-\r\n-def mainGame():\r\n-    score = 0\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int(SCREENWIDTH/2)\r\n-    basex = 0\r\n-\r\n-    #create 2 pipes for blitting on screen \r\n-\r\n-    newPipe1 = getRandomPipe()\r\n-    newPipe2 = getRandomPipe()\r\n-\r\n-    # my list of upper and lower pipes\r\n-\r\n-    upperPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n-    ]\r\n-\r\n-    lowerPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n-    ]\r\n-\r\n-    pipeVelX = -4\r\n-\r\n-    playerVelY = -9\r\n-    playerMaxVelY = 10\r\n-    playerMinVelY = -8\r\n-    playerAccY = 1\r\n-\r\n-    playerFlapAccv = -8     #velocity while flapping\r\n-    playerFlapped = False  # it is true only when bird is flapping \r\n-\r\n-\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                if playery > 0 :\r\n-                    playerVelY = playerFlapAccv\r\n-                    playerFlapped = True\r\n-                    GAME_SOUNDS['wing'].play()\r\n-         \r\n-        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n-        if crashTest:\r\n-            return\r\n-\r\n-        #check for score \r\n-        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n-        for pipe in upperPipes:\r\n-            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n-                score +=1\r\n-                print(f\"Your score is {score}\")\r\n-                GAME_SOUNDS['point'].play()\r\n-\r\n-        if playerVelY < playerMaxVelY and not playerFlapped:\r\n-            playerVelY += playerAccY\r\n-        \r\n-        if playerFlapped:\r\n-            playerFlapped = False\r\n-        playerHeight =  GAME_SPRITES['player'].get_height()\r\n-        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n-        \r\n-        #move pipes to the left\r\n-        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n-            upperPipe['x'] += pipeVelX\r\n-            lowerPipe['x'] += pipeVelX\r\n-\r\n-        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n-        if 0 < upperPipes[0]['x'] < 5:\r\n-          newpipe = getRandomPipe()\r\n-          upperPipes.append(newpipe[0])\r\n-          lowerPipes.append(newpipe[1])\r\n- \r\n-        # if the pipe is out of the screen , remove it \r\n-        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-            upperPipes.pop(0)\r\n-            lowerPipes.pop(0)\r\n-        \r\n-        #lets blit our sprites \r\n-        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n-        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n-\r\n-        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n-        myDigits = [int(x) for x in list(str(score))]\r\n-        width = 0\r\n-        for digit in myDigits:\r\n-            width += GAME_SPRITES['numbers'][digit].get_width()\r\n-        Xoffset = (SCREENWIDTH - width)/2\r\n-\r\n-        for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n-            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-        pygame.display.update()\r\n-        FPSCLOCK.tick(FPS)\r\n-\r\n-def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n-    if playery> GROUNDY - 25  or playery<0:\r\n-        GAME_SOUNDS['hit'].play()\r\n-        return True  \r\n-    \r\n-    for pipe in upperPipes:\r\n-        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-        if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n-           GAME_SOUNDS['hit'].play()\r\n-           return True\r\n-\r\n-    for pipe in lowerPipes:\r\n-        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n-            GAME_SOUNDS['hit'].play()\r\n-            return True\r\n-\r\n-    return False\r\n-\r\n-def getRandomPipe():\r\n-    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n-    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT/3\r\n-    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n-    pipeX = SCREENWIDTH + 10\r\n-    y1 = pipeheight - y2 + offset\r\n-    pipe = [\r\n-        {'x':pipeX, 'y':-y1},   #upper pipe\r\n-        {'x':pipeX, 'y':y2}    #lower pipe\r\n-\r\n-        ]\r\n-    return pipe    \r\n-    \r\n-    \r\n-\r\n-\r\n-\r\n-if __name__==\"__main__\":      #this will be main point from where game will start\r\n-    \r\n-    pygame.init()             #ini pygame module\r\n-    FPSCLOCK = pygame.time.Clock()    \r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n-    GAME_SPRITES['numbers'] = (\r\n-        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-    )\r\n-\r\n-    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-    pygame.image.load(PIPE).convert_alpha()\r\n-    )\r\n-\r\n-\r\n-    #game sounds\r\n-\r\n-    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-    while True:\r\n-        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-        mainGame()       #this is the main game func\r\n-\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727183382797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,232 @@\n-\n+import random  #for generating random nos\r\n+import sys     #for exit \r\n+import pygame\r\n+from   pygame.locals import *  #basic pygame imports\r\n+\r\n+#global var\r\n+FPS = 32\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n+SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+GROUNDY = SCREENHEIGHT * 0.8\r\n+GAME_SPRITES = {}\r\n+GAME_SOUNDS = {}\r\n+\r\n+#These 3 are separate becoz i want to make them global var \r\n+PLAYER = 'gallery/sprites/bird.png'\r\n+BACKGROUND = 'gallery/sprites/background.png'\r\n+PIPE = 'gallery/sprites/pipe.png'\r\n+\r\n+\r\n+def welcomeScreen():\r\n+    \"\"\"\r\n+    Shows welcome images on the screen\r\n+    \"\"\"\r\n+\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagey = int(SCREENHEIGHT*0.13)\r\n+    basex = 0\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            # if user clicks on cross button, close the game\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+\r\n+            # If the user presses space or up key, start the game for them\r\n+            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                return\r\n+                \r\n+            else:\r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n+\r\n+def mainGame():\r\n+    score = 0\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int(SCREENHEIGHT/2)\r\n+    basex = 0\r\n+\r\n+    #create 2 pipes for blitting on screen \r\n+\r\n+    newPipe1 = getRandomPipe()\r\n+    newPipe2 = getRandomPipe()\r\n+\r\n+    # my list of upper and lower pipes\r\n+\r\n+    upperPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']}  # upper pipe\r\n+    ]\r\n+\r\n+    lowerPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']} # upper pipe\r\n+    ]\r\n+\r\n+    pipeVelX = -4\r\n+\r\n+    playerVelY = -9\r\n+    playerMaxVelY = 10\r\n+    playerMinVelY = -8\r\n+    playerAccY = 1\r\n+\r\n+    playerFlapAccv = -8     #velocity while flapping\r\n+    playerFlapped = False  # it is true only when bird is flapping \r\n+\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                if playery > 0 :\r\n+                    playerVelY = playerFlapAccv\r\n+                    playerFlapped = True\r\n+                    GAME_SOUNDS['wing'].play()\r\n+         \r\n+        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+        if crashTest:\r\n+            return\r\n+\r\n+        #check for score \r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+        for pipe in upperPipes:\r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+                score +=1\r\n+                print(f\"Your score is {score}\")\r\n+                GAME_SOUNDS['point'].play()\r\n+\r\n+        if playerVelY < playerMaxVelY and not playerFlapped:\r\n+            playerVelY += playerAccY\r\n+        \r\n+        if playerFlapped:\r\n+            playerFlapped = False\r\n+        playerHeight =  GAME_SPRITES['player'].get_height()\r\n+        playery = playery + min(playerVelY, GROUNDY - playery - GAME_SPRITES['player'].get_height())\r\n+        \r\n+        #move pipes to the left\r\n+        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+            upperPipe['x'] += pipeVelX\r\n+            lowerPipe['x'] += pipeVelX\r\n+\r\n+        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+        if 0 < upperPipes[0]['x'] < 5:\r\n+           newPipe = getRandomPipe()\r\n+           upperPipes.append(newPipe[0])\r\n+           lowerPipes.append(newPipe[1])\r\n+ \r\n+        # if the pipe is out of the screen , remove it \r\n+        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+            upperPipes.pop(0)\r\n+            lowerPipes.pop(0)\r\n+        \r\n+        #lets blit our sprites \r\n+        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))  # upper pipe\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))  # lower pipe\r\n+\r\n+        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+        myDigits = [int(x) for x in list(str(score))]\r\n+        width = 0\r\n+        for digit in myDigits:\r\n+            width += GAME_SPRITES['numbers'][digit].get_width()\r\n+        Xoffset = (SCREENWIDTH - width)/2\r\n+\r\n+        for digit in myDigits:\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+        pygame.display.update()\r\n+        FPSCLOCK.tick(FPS)\r\n+\r\n+def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n+    if playery > GROUNDY - 25 or playery < 0:\r\n+        GAME_SOUNDS['hit'].play()\r\n+        print(\"Collision with ground or ceiling\")\r\n+        return True\r\n+\r\n+    playerRect = pygame.Rect(playerx, playery, GAME_SPRITES['player'].get_width(), GAME_SPRITES['player'].get_height())\r\n+\r\n+    for pipe in upperPipes:\r\n+        pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][0].get_width(), GAME_SPRITES['pipe'][0].get_height())\r\n+        if playerRect.colliderect(pipeRect):\r\n+            GAME_SOUNDS['hit'].play()\r\n+            print(f\"Collision with upper pipe at ({pipe['x']}, {pipe['y']})\")\r\n+            return True\r\n+\r\n+    for pipe in lowerPipes:\r\n+        pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][1].get_width(), GAME_SPRITES['pipe'][1].get_height())\r\n+        if playerRect.colliderect(pipeRect):\r\n+            GAME_SOUNDS['hit'].play()\r\n+            print(f\"Collision with lower pipe at ({pipe['x']}, {pipe['y']})\")\r\n+            return True\r\n+\r\n+    return False\r\n+\r\n+def getRandomPipe():\r\n+    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+    offset = SCREENHEIGHT / 3\r\n+    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    pipeX = SCREENWIDTH + 10\r\n+    y1 = pipeheight - y2 + offset\r\n+    pipe = [\r\n+        {'x': pipeX, 'y': -y1},  # upper pipe\r\n+        {'x': pipeX, 'y': y2}    # lower pipe\r\n+    ]\r\n+    \r\n+    # Debugging prints\r\n+    print(f\"Generated Pipe Positions: Upper({pipe[0]['x']}, {pipe[0]['y']}), Lower({pipe[1]['x']}, {pipe[1]['y']})\")\r\n+    \r\n+    return pipe\r\n+ \r\n+if __name__==\"__main__\":      #this will be main point from where game will start\r\n+    \r\n+    pygame.init()             #ini pygame module\r\n+    FPSCLOCK = pygame.time.Clock()    \r\n+    pygame.display.set_caption('Flappy Fin by Sana')\r\n+    GAME_SPRITES['numbers'] = (\r\n+        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+    )\r\n+\r\n+    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+    pygame.image.load(PIPE).convert_alpha()\r\n+    )\r\n+\r\n+\r\n+    #game sounds\r\n+\r\n+    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+\r\n+    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+\r\n+    while True:\r\n+        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+        mainGame()       #this is the main game func\r\n+\r\n"
                },
                {
                    "date": 1727527367308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,17 +67,17 @@\n     ]\r\n \r\n     lowerPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']} # upper pipe\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']} # lower pipe\r\n     ]\r\n \r\n     pipeVelX = -4\r\n \r\n     playerVelY = -9\r\n     playerMaxVelY = 10\r\n     playerMinVelY = -8\r\n-    playerAccY = 1\r\n+    playerAccY = 1 \r\n \r\n     playerFlapAccv = -8     #velocity while flapping\r\n     playerFlapped = False  # it is true only when bird is flapping \r\n \r\n@@ -137,9 +137,9 @@\n             SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))  # lower pipe\r\n \r\n         SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n         SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-        myDigits = [int(x) for x in list(str(score))]\r\n+        myDigits = [int(x) for x in list(str(score))]           #This converts the score into a list of individual digits.\r\n         width = 0\r\n         for digit in myDigits:\r\n             width += GAME_SPRITES['numbers'][digit].get_width()\r\n         Xoffset = (SCREENWIDTH - width)/2\r\n"
                }
            ],
            "date": 1726553532391,
            "name": "Commit-0",
            "content": "import random  #for generating random nos\r\nimport sys     #for exit \r\nimport pygame\r\nfrom   pygame.locals import *  #basic pygame imports\r\n\r\n#global var\r\nFPS = 32\r\nSCREENWIDTH = 289\r\nSCREENHEIGHT = 511\r\nSCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\nGROUNDY = SCREENHEIGHT * 0.8\r\nGAME_SPRITES = {}\r\nGAME_SOUNDS = {}\r\n#These 3 are separate becoz i want to make them global var \r\nPLAYER = 'gallery/sprites/bird.png'\r\nBACKGROUND = 'gallery/sprites/background.png'\r\nPIPE = 'gallery/sprites/pipe.png'\r\n\r\nif __name__==\"__main__\":      #this will be main point from where game will start\r\n    \r\n    pygame.init()             #ini pygame module\r\n    FPSCLOCK = pygame.time.Clock()    \r\n    pygame.display.set_caption('Flappy Bird by Sana')\r\n    GAME_SPRITES['numbers'] = (\r\n        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n    )\r\n\r\n    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n    pygame.image.load(PIPE).convert_alpha()\r\n    )\r\n    #game sounds\r\n\r\n    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n\r\n    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()a\r\n    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n\r\n    while True:\r\n        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n        mainGame()       #this is the main game func\r\n\r\n\r\n"
        }
    ]
}