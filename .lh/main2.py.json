{
    "sourceFile": "main2.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1726666440060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726666885658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,15 +130,16 @@\n             upperPipes.pop(0)\r\n             lowerPipes.pop(0)\r\n         \r\n         #lets blit our sprites \r\n-        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n-        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n+        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+    SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))  # upper pipe\r\n+    SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))  # lower pipe\r\n \r\n-        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n+SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+\r\n         myDigits = [int(x) for x in list(str(score))]\r\n         width = 0\r\n         for digit in myDigits:\r\n             width += GAME_SPRITES['numbers'][digit].get_width()\r\n@@ -166,24 +167,26 @@\n             GAME_SOUNDS['hit'].play()\r\n             return True\r\n \r\n     return False\r\n-\r\n def getRandomPipe():\r\n-    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT/3\r\n-    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    offset = SCREENHEIGHT / 3\r\n+    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n     pipeX = SCREENWIDTH + 10\r\n     y1 = pipeheight - y2 + offset\r\n     pipe = [\r\n-        {'x':pipeX, 'y':-y1},   #upper pipe\r\n-        {'x':pipeX, 'y':y2}    #lower pipe\r\n-\r\n-        ]\r\n-    return pipe    \r\n+        {'x': pipeX, 'y': -y1},  # upper pipe\r\n+        {'x': pipeX, 'y': y2}    # lower pipe\r\n+    ]\r\n     \r\n+    # Debugging prints\r\n+    print(f\"Generated Pipe Positions: Upper({pipe[0]['x']}, {pipe[0]['y']}), Lower({pipe[1]['x']}, {pipe[1]['y']})\")\r\n     \r\n+    return pipe\r\n+ \r\n+    \r\n+    \r\n \r\n \r\n \r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n"
                },
                {
                    "date": 1726666991175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,14 +131,14 @@\n             lowerPipes.pop(0)\r\n         \r\n         #lets blit our sprites \r\n         SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n-for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n-    SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))  # upper pipe\r\n-    SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))  # lower pipe\r\n+        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))  # upper pipe\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))  # lower pipe\r\n \r\n-SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n-SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n \r\n         myDigits = [int(x) for x in list(str(score))]\r\n         width = 0\r\n         for digit in myDigits:\r\n"
                },
                {
                    "date": 1726667600725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,14 +62,14 @@\n     # my list of upper and lower pipes\r\n \r\n     upperPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']}  # upper pipe\r\n     ]\r\n \r\n     lowerPipes = [\r\n         {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']} # upper pipe\r\n     ]\r\n \r\n     pipeVelX = -4\r\n \r\n@@ -120,11 +120,11 @@\n             lowerPipe['x'] += pipeVelX\r\n \r\n         # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n         if 0 < upperPipes[0]['x'] < 5:\r\n-          newpipe = getRandomPipe()\r\n-          upperPipes.append(newpipe[0])\r\n-          lowerPipes.append(newpipe[1])\r\n+           newPipe = getRandomPipe()\r\n+           upperPipes.append(newPipe[0])\r\n+           lowerPipes.append(newPipe[1])\r\n  \r\n         # if the pipe is out of the screen , remove it \r\n         if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n             upperPipes.pop(0)\r\n@@ -137,9 +137,8 @@\n             SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))  # lower pipe\r\n \r\n         SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n         SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-\r\n         myDigits = [int(x) for x in list(str(score))]\r\n         width = 0\r\n         for digit in myDigits:\r\n             width += GAME_SPRITES['numbers'][digit].get_width()\r\n@@ -155,16 +154,19 @@\n     if playery> GROUNDY - 25  or playery<0:\r\n         GAME_SOUNDS['hit'].play()\r\n         return True  \r\n     \r\n+    playerRect = pygame.Rect(playerx, playery, GAME_SPRITES['player'].get_width(), GAME_SPRITES['player'].get_height())\r\n+\r\n     for pipe in upperPipes:\r\n-        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n-        if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n-           GAME_SOUNDS['hit'].play()\r\n-           return True\r\n+        pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][0].get_width(), GAME_SPRITES['pipe'][0].get_height())\r\n+        if playerRect.colliderect(pipeRect):\r\n+            GAME_SOUNDS['hit'].play()\r\n+            return True\r\n \r\n     for pipe in lowerPipes:\r\n-        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n+        pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][1].get_width(), GAME_SPRITES['pipe'][1].get_height())\r\n+        if playerRect.colliderect(pipeRect):\r\n             GAME_SOUNDS['hit'].play()\r\n             return True\r\n \r\n     return False\r\n@@ -183,13 +185,8 @@\n     print(f\"Generated Pipe Positions: Upper({pipe[0]['x']}, {pipe[0]['y']}), Lower({pipe[1]['x']}, {pipe[1]['y']})\")\r\n     \r\n     return pipe\r\n  \r\n-    \r\n-    \r\n-\r\n-\r\n-\r\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n     pygame.init()             #ini pygame module\r\n     FPSCLOCK = pygame.time.Clock()    \r\n"
                },
                {
                    "date": 1726667980748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         \r\n         if playerFlapped:\r\n             playerFlapped = False\r\n         playerHeight =  GAME_SPRITES['player'].get_height()\r\n-        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n+        playery = playery + min(playerVelY, GROUNDY - playery - GAME_SPRITES['player'].get_height()))\r\n         \r\n         #move pipes to the left\r\n         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n             upperPipe['x'] += pipeVelX\r\n@@ -149,28 +149,32 @@\n             Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n         pygame.display.update()\r\n         FPSCLOCK.tick(FPS)\r\n \r\n-def isCollide(playerx,playery,upperPipes,lowerPipes):\r\n-    if playery> GROUNDY - 25  or playery<0:\r\n+def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n+    if playery > GROUNDY - 25 or playery < 0:\r\n         GAME_SOUNDS['hit'].play()\r\n-        return True  \r\n-    \r\n+        print(\"Collision with ground or ceiling\")\r\n+        return True\r\n+\r\n     playerRect = pygame.Rect(playerx, playery, GAME_SPRITES['player'].get_width(), GAME_SPRITES['player'].get_height())\r\n \r\n     for pipe in upperPipes:\r\n         pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][0].get_width(), GAME_SPRITES['pipe'][0].get_height())\r\n         if playerRect.colliderect(pipeRect):\r\n             GAME_SOUNDS['hit'].play()\r\n+            print(f\"Collision with upper pipe at ({pipe['x']}, {pipe['y']})\")\r\n             return True\r\n \r\n     for pipe in lowerPipes:\r\n         pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][1].get_width(), GAME_SPRITES['pipe'][1].get_height())\r\n         if playerRect.colliderect(pipeRect):\r\n             GAME_SOUNDS['hit'].play()\r\n+            print(f\"Collision with lower pipe at ({pipe['x']}, {pipe['y']})\")\r\n             return True\r\n \r\n     return False\r\n+\r\n def getRandomPipe():\r\n     pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n     offset = SCREENHEIGHT / 3\r\n     y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n"
                },
                {
                    "date": 1726668011159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         \r\n         if playerFlapped:\r\n             playerFlapped = False\r\n         playerHeight =  GAME_SPRITES['player'].get_height()\r\n-        playery = playery + min(playerVelY, GROUNDY - playery - GAME_SPRITES['player'].get_height()))\r\n+        playery = playery + min(playerVelY, GROUNDY - playery - GAME_SPRITES['player'].get_height())\r\n         \r\n         #move pipes to the left\r\n         for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n             upperPipe['x'] += pipeVelX\r\n"
                },
                {
                    "date": 1726668170151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n \r\n def mainGame():\r\n     score = 0\r\n     playerx = int(SCREENWIDTH/5)\r\n-    playery = int(SCREENWIDTH/2)\r\n+    playery = int(SCREENHEIGHT/2)\r\n     basex = 0\r\n \r\n     #create 2 pipes for blitting on screen \r\n \r\n"
                },
                {
                    "date": 1726996088063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,232 @@\n+import random  #for generating random nos\r\n+import sys     #for exit \r\n+import pygame\r\n+from   pygame.locals import *  #basic pygame imports\r\n+\r\n+#global var\r\n+FPS = 32\r\n+SCREENWIDTH = 289\r\n+SCREENHEIGHT = 511\r\n+SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n+GROUNDY = SCREENHEIGHT * 0.8\r\n+GAME_SPRITES = {}\r\n+GAME_SOUNDS = {}\r\n+\r\n+#These 3 are separate becoz i want to make them global var \r\n+PLAYER = 'gallery/sprites/bird.png'\r\n+BACKGROUND = 'gallery/sprites/background.png'\r\n+PIPE = 'gallery/sprites/pipe.png'\r\n+\r\n+\r\n+def welcomeScreen():\r\n+    \"\"\"\r\n+    Shows welcome images on the screen\r\n+    \"\"\"\r\n+\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n+    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n+    messagey = int(SCREENHEIGHT*0.13)\r\n+    basex = 0\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            # if user clicks on cross button, close the game\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+\r\n+            # If the user presses space or up key, start the game for them\r\n+            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                return\r\n+                \r\n+            else:\r\n+                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n+                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n+                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n+                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                pygame.display.update()\r\n+                FPSCLOCK.tick(FPS)\r\n+\r\n+def mainGame():\r\n+    score = 0\r\n+    playerx = int(SCREENWIDTH/5)\r\n+    playery = int(SCREENHEIGHT/2)\r\n+    basex = 0\r\n+\r\n+    #create 2 pipes for blitting on screen \r\n+\r\n+    newPipe1 = getRandomPipe()\r\n+    newPipe2 = getRandomPipe()\r\n+\r\n+    # my list of upper and lower pipes\r\n+\r\n+    upperPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']}  # upper pipe\r\n+    ]\r\n+\r\n+    lowerPipes = [\r\n+        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n+        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']} # upper pipe\r\n+    ]\r\n+\r\n+    pipeVelX = -4\r\n+\r\n+    playerVelY = -9\r\n+    playerMaxVelY = 10\r\n+    playerMinVelY = -8\r\n+    playerAccY = 1\r\n+\r\n+    playerFlapAccv = -8     #velocity while flapping\r\n+    playerFlapped = False  # it is true only when bird is flapping \r\n+\r\n+\r\n+    while True:\r\n+        for event in pygame.event.get():\r\n+            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n+                pygame.quit()\r\n+                sys.exit()\r\n+            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n+                if playery > 0 :\r\n+                    playerVelY = playerFlapAccv\r\n+                    playerFlapped = True\r\n+                    GAME_SOUNDS['wing'].play()\r\n+         \r\n+        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n+        if crashTest:\r\n+            return\r\n+\r\n+        #check for score \r\n+        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n+        for pipe in upperPipes:\r\n+            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n+            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n+                score +=1\r\n+                print(f\"Your score is {score}\")\r\n+                GAME_SOUNDS['point'].play()\r\n+\r\n+        if playerVelY < playerMaxVelY and not playerFlapped:\r\n+            playerVelY += playerAccY\r\n+        \r\n+        if playerFlapped:\r\n+            playerFlapped = False\r\n+        playerHeight =  GAME_SPRITES['player'].get_height()\r\n+        playery = playery + min(playerVelY, GROUNDY - playery - GAME_SPRITES['player'].get_height())\r\n+        \r\n+        #move pipes to the left\r\n+        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n+            upperPipe['x'] += pipeVelX\r\n+            lowerPipe['x'] += pipeVelX\r\n+\r\n+        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n+        if 0 < upperPipes[0]['x'] < 5:\r\n+           newPipe = getRandomPipe()\r\n+           upperPipes.append(newPipe[0])\r\n+           lowerPipes.append(newPipe[1])\r\n+ \r\n+        # if the pipe is out of the screen , remove it \r\n+        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n+            upperPipes.pop(0)\r\n+            lowerPipes.pop(0)\r\n+        \r\n+        #lets blit our sprites \r\n+        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n+        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))  # upper pipe\r\n+            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))  # lower pipe\r\n+\r\n+        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n+        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n+        myDigits = [int(x) for x in list(str(score))]\r\n+        width = 0\r\n+        for digit in myDigits:\r\n+            width += GAME_SPRITES['numbers'][digit].get_width()\r\n+        Xoffset = (SCREENWIDTH - width)/2\r\n+\r\n+        for digit in myDigits:\r\n+            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n+            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n+        pygame.display.update()\r\n+        FPSCLOCK.tick(FPS)\r\n+\r\n+def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n+    if playery > GROUNDY - 25 or playery < 0:\r\n+        GAME_SOUNDS['hit'].play()\r\n+        print(\"Collision with ground or ceiling\")\r\n+        return True\r\n+\r\n+    playerRect = pygame.Rect(playerx, playery, GAME_SPRITES['player'].get_width(), GAME_SPRITES['player'].get_height())\r\n+\r\n+    for pipe in upperPipes:\r\n+        pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][0].get_width(), GAME_SPRITES['pipe'][0].get_height())\r\n+        if playerRect.colliderect(pipeRect):\r\n+            GAME_SOUNDS['hit'].play()\r\n+            print(f\"Collision with upper pipe at ({pipe['x']}, {pipe['y']})\")\r\n+            return True\r\n+\r\n+    for pipe in lowerPipes:\r\n+        pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][1].get_width(), GAME_SPRITES['pipe'][1].get_height())\r\n+        if playerRect.colliderect(pipeRect):\r\n+            GAME_SOUNDS['hit'].play()\r\n+            print(f\"Collision with lower pipe at ({pipe['x']}, {pipe['y']})\")\r\n+            return True\r\n+\r\n+    return False\r\n+\r\n+def getRandomPipe():\r\n+    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n+    offset = SCREENHEIGHT / 3\r\n+    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n+    pipeX = SCREENWIDTH + 10\r\n+    y1 = pipeheight - y2 + offset\r\n+    pipe = [\r\n+        {'x': pipeX, 'y': -y1},  # upper pipe\r\n+        {'x': pipeX, 'y': y2}    # lower pipe\r\n+    ]\r\n+    \r\n+    # Debugging prints\r\n+    print(f\"Generated Pipe Positions: Upper({pipe[0]['x']}, {pipe[0]['y']}), Lower({pipe[1]['x']}, {pipe[1]['y']})\")\r\n+    \r\n+    return pipe\r\n+ \r\n+if __name__==\"__main__\":      #this will be main point from where game will start\r\n+    \r\n+    pygame.init()             #ini pygame module\r\n+    FPSCLOCK = pygame.time.Clock()    \r\n+    pygame.display.set_caption('Flappy Bird by Sana')\r\n+    GAME_SPRITES['numbers'] = (\r\n+        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n+        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n+    )\r\n+\r\n+    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n+    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n+    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n+    pygame.image.load(PIPE).convert_alpha()\r\n+    )\r\n+\r\n+\r\n+    #game sounds\r\n+\r\n+    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n+    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n+    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n+    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n+    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n+\r\n+    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n+    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n+\r\n+    while True:\r\n+        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n+        mainGame()       #this is the main game func\r\n+\r\n"
                },
                {
                    "date": 1726996738794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,236 +229,4 @@\n     while True:\r\n         welcomeScreen()  # shows welcome screen to user until he presses the button\r\n         mainGame()       #this is the main game func\r\n \r\n-import random  #for generating random nos\r\n-import sys     #for exit \r\n-import pygame\r\n-from   pygame.locals import *  #basic pygame imports\r\n-\r\n-#global var\r\n-FPS = 32\r\n-SCREENWIDTH = 289\r\n-SCREENHEIGHT = 511\r\n-SCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\n-GROUNDY = SCREENHEIGHT * 0.8\r\n-GAME_SPRITES = {}\r\n-GAME_SOUNDS = {}\r\n-\r\n-#These 3 are separate becoz i want to make them global var \r\n-PLAYER = 'gallery/sprites/bird.png'\r\n-BACKGROUND = 'gallery/sprites/background.png'\r\n-PIPE = 'gallery/sprites/pipe.png'\r\n-\r\n-\r\n-def welcomeScreen():\r\n-    \"\"\"\r\n-    Shows welcome images on the screen\r\n-    \"\"\"\r\n-\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n-    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n-    messagey = int(SCREENHEIGHT*0.13)\r\n-    basex = 0\r\n-\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            # if user clicks on cross button, close the game\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-\r\n-            # If the user presses space or up key, start the game for them\r\n-            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                return\r\n-                \r\n-            else:\r\n-                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n-                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n-                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n-                pygame.display.update()\r\n-                FPSCLOCK.tick(FPS)\r\n-\r\n-def mainGame():\r\n-    score = 0\r\n-    playerx = int(SCREENWIDTH/5)\r\n-    playery = int(SCREENHEIGHT/2)\r\n-    basex = 0\r\n-\r\n-    #create 2 pipes for blitting on screen \r\n-\r\n-    newPipe1 = getRandomPipe()\r\n-    newPipe2 = getRandomPipe()\r\n-\r\n-    # my list of upper and lower pipes\r\n-\r\n-    upperPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']}  # upper pipe\r\n-    ]\r\n-\r\n-    lowerPipes = [\r\n-        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n-        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']} # upper pipe\r\n-    ]\r\n-\r\n-    pipeVelX = -4\r\n-\r\n-    playerVelY = -9\r\n-    playerMaxVelY = 10\r\n-    playerMinVelY = -8\r\n-    playerAccY = 1\r\n-\r\n-    playerFlapAccv = -8     #velocity while flapping\r\n-    playerFlapped = False  # it is true only when bird is flapping \r\n-\r\n-\r\n-    while True:\r\n-        for event in pygame.event.get():\r\n-            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n-                pygame.quit()\r\n-                sys.exit()\r\n-            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n-                if playery > 0 :\r\n-                    playerVelY = playerFlapAccv\r\n-                    playerFlapped = True\r\n-                    GAME_SOUNDS['wing'].play()\r\n-         \r\n-        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n-        if crashTest:\r\n-            return\r\n-\r\n-        #check for score \r\n-        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n-        for pipe in upperPipes:\r\n-            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n-            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n-                score +=1\r\n-                print(f\"Your score is {score}\")\r\n-                GAME_SOUNDS['point'].play()\r\n-\r\n-        if playerVelY < playerMaxVelY and not playerFlapped:\r\n-            playerVelY += playerAccY\r\n-        \r\n-        if playerFlapped:\r\n-            playerFlapped = False\r\n-        playerHeight =  GAME_SPRITES['player'].get_height()\r\n-        playery = playery + min(playerVelY, GROUNDY - playery - GAME_SPRITES['player'].get_height())\r\n-        \r\n-        #move pipes to the left\r\n-        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n-            upperPipe['x'] += pipeVelX\r\n-            lowerPipe['x'] += pipeVelX\r\n-\r\n-        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n-        if 0 < upperPipes[0]['x'] < 5:\r\n-           newPipe = getRandomPipe()\r\n-           upperPipes.append(newPipe[0])\r\n-           lowerPipes.append(newPipe[1])\r\n- \r\n-        # if the pipe is out of the screen , remove it \r\n-        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n-            upperPipes.pop(0)\r\n-            lowerPipes.pop(0)\r\n-        \r\n-        #lets blit our sprites \r\n-        SCREEN.blit(GAME_SPRITES['background'], (0, 0))\r\n-        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][0], (upperPipe['x'], upperPipe['y']))  # upper pipe\r\n-            SCREEN.blit(GAME_SPRITES['pipe'][1], (lowerPipe['x'], lowerPipe['y']))  # lower pipe\r\n-\r\n-        SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))\r\n-        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))\r\n-        myDigits = [int(x) for x in list(str(score))]\r\n-        width = 0\r\n-        for digit in myDigits:\r\n-            width += GAME_SPRITES['numbers'][digit].get_width()\r\n-        Xoffset = (SCREENWIDTH - width)/2\r\n-\r\n-        for digit in myDigits:\r\n-            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n-            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n-        pygame.display.update()\r\n-        FPSCLOCK.tick(FPS)\r\n-\r\n-def isCollide(playerx, playery, upperPipes, lowerPipes):\r\n-    if playery > GROUNDY - 25 or playery < 0:\r\n-        GAME_SOUNDS['hit'].play()\r\n-        print(\"Collision with ground or ceiling\")\r\n-        return True\r\n-\r\n-    playerRect = pygame.Rect(playerx, playery, GAME_SPRITES['player'].get_width(), GAME_SPRITES['player'].get_height())\r\n-\r\n-    for pipe in upperPipes:\r\n-        pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][0].get_width(), GAME_SPRITES['pipe'][0].get_height())\r\n-        if playerRect.colliderect(pipeRect):\r\n-            GAME_SOUNDS['hit'].play()\r\n-            print(f\"Collision with upper pipe at ({pipe['x']}, {pipe['y']})\")\r\n-            return True\r\n-\r\n-    for pipe in lowerPipes:\r\n-        pipeRect = pygame.Rect(pipe['x'], pipe['y'], GAME_SPRITES['pipe'][1].get_width(), GAME_SPRITES['pipe'][1].get_height())\r\n-        if playerRect.colliderect(pipeRect):\r\n-            GAME_SOUNDS['hit'].play()\r\n-            print(f\"Collision with lower pipe at ({pipe['x']}, {pipe['y']})\")\r\n-            return True\r\n-\r\n-    return False\r\n-\r\n-def getRandomPipe():\r\n-    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n-    offset = SCREENHEIGHT / 3\r\n-    y2 = offset + random.randrange(0, int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n-    pipeX = SCREENWIDTH + 10\r\n-    y1 = pipeheight - y2 + offset\r\n-    pipe = [\r\n-        {'x': pipeX, 'y': -y1},  # upper pipe\r\n-        {'x': pipeX, 'y': y2}    # lower pipe\r\n-    ]\r\n-    \r\n-    # Debugging prints\r\n-    print(f\"Generated Pipe Positions: Upper({pipe[0]['x']}, {pipe[0]['y']}), Lower({pipe[1]['x']}, {pipe[1]['y']})\")\r\n-    \r\n-    return pipe\r\n- \r\n-if __name__==\"__main__\":      #this will be main point from where game will start\r\n-    \r\n-    pygame.init()             #ini pygame module\r\n-    FPSCLOCK = pygame.time.Clock()    \r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n-    GAME_SPRITES['numbers'] = (\r\n-        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n-        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n-    )\r\n-\r\n-    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n-    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n-    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n-    pygame.image.load(PIPE).convert_alpha()\r\n-    )\r\n-\r\n-\r\n-    #game sounds\r\n-\r\n-    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n-    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n-    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n-    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n-    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n-\r\n-    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n-    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n-\r\n-    while True:\r\n-        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n-        mainGame()       #this is the main game func\r\n-\r\n"
                },
                {
                    "date": 1727180644939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n if __name__==\"__main__\":      #this will be main point from where game will start\r\n     \r\n     pygame.init()             #ini pygame module\r\n     FPSCLOCK = pygame.time.Clock()    \r\n-    pygame.display.set_caption('Flappy Bird by Sana')\r\n+    pygame.display.set_caption('Flappy Fin by Sana')\r\n     GAME_SPRITES['numbers'] = (\r\n         pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n         pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n"
                },
                {
                    "date": 1727182331006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n             else:\r\n                 SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                 SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                 SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n-                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n+                # SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                 pygame.display.update()\r\n                 FPSCLOCK.tick(FPS)\r\n \r\n def mainGame():\r\n"
                }
            ],
            "date": 1726666440060,
            "name": "Commit-0",
            "content": "import random  #for generating random nos\r\nimport sys     #for exit \r\nimport pygame\r\nfrom   pygame.locals import *  #basic pygame imports\r\n\r\n#global var\r\nFPS = 32\r\nSCREENWIDTH = 289\r\nSCREENHEIGHT = 511\r\nSCREEN =pygame.display.set_mode((SCREENWIDTH,SCREENHEIGHT))  #initialize a window or screen for display\r\nGROUNDY = SCREENHEIGHT * 0.8\r\nGAME_SPRITES = {}\r\nGAME_SOUNDS = {}\r\n\r\n#These 3 are separate becoz i want to make them global var \r\nPLAYER = 'gallery/sprites/bird.png'\r\nBACKGROUND = 'gallery/sprites/background.png'\r\nPIPE = 'gallery/sprites/pipe.png'\r\n\r\n\r\ndef welcomeScreen():\r\n    \"\"\"\r\n    Shows welcome images on the screen\r\n    \"\"\"\r\n\r\n    playerx = int(SCREENWIDTH/5)\r\n    playery = int((SCREENHEIGHT - GAME_SPRITES['player'].get_height())/2)\r\n    messagex = int((SCREENWIDTH - GAME_SPRITES['message'].get_width())/2)\r\n    messagey = int(SCREENHEIGHT*0.13)\r\n    basex = 0\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            # if user clicks on cross button, close the game\r\n            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n                pygame.quit()\r\n                sys.exit()\r\n\r\n            # If the user presses space or up key, start the game for them\r\n            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                return\r\n                \r\n            else:\r\n                SCREEN.blit(GAME_SPRITES['background'], (0, 0))    \r\n                SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))    \r\n                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey ))    \r\n                SCREEN.blit(GAME_SPRITES['base'], (basex, GROUNDY))    \r\n                pygame.display.update()\r\n                FPSCLOCK.tick(FPS)\r\n\r\ndef mainGame():\r\n    score = 0\r\n    playerx = int(SCREENWIDTH/5)\r\n    playery = int(SCREENWIDTH/2)\r\n    basex = 0\r\n\r\n    #create 2 pipes for blitting on screen \r\n\r\n    newPipe1 = getRandomPipe()\r\n    newPipe2 = getRandomPipe()\r\n\r\n    # my list of upper and lower pipes\r\n\r\n    upperPipes = [\r\n        {'x':SCREENWIDTH + 200, 'y': newPipe1[0]['y']},\r\n        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[0]['y']},  # upper pipe\r\n    ]\r\n\r\n    lowerPipes = [\r\n        {'x':SCREENWIDTH + 200, 'y': newPipe1[1]['y']},\r\n        {'x': SCREENWIDTH + 200+(SCREENWIDTH/2), 'y': newPipe2[1]['y']},  # upper pipe\r\n    ]\r\n\r\n    pipeVelX = -4\r\n\r\n    playerVelY = -9\r\n    playerMaxVelY = 10\r\n    playerMinVelY = -8\r\n    playerAccY = 1\r\n\r\n    playerFlapAccv = -8     #velocity while flapping\r\n    playerFlapped = False  # it is true only when bird is flapping \r\n\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == QUIT or (event.type==KEYDOWN and event.key == K_ESCAPE):\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == KEYDOWN and (event.key==K_SPACE or event.key == K_UP):\r\n                if playery > 0 :\r\n                    playerVelY = playerFlapAccv\r\n                    playerFlapped = True\r\n                    GAME_SOUNDS['wing'].play()\r\n         \r\n        crashTest = isCollide(playerx,playery,upperPipes,lowerPipes)   #this func will return true is u are crashed \r\n        if crashTest:\r\n            return\r\n\r\n        #check for score \r\n        playerMidPos = playerx + GAME_SPRITES['player'].get_width()/2\r\n        for pipe in upperPipes:\r\n            pipeMidPos = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2\r\n            if pipeMidPos<= playerMidPos < pipeMidPos + 4:\r\n                score +=1\r\n                print(f\"Your score is {score}\")\r\n                GAME_SOUNDS['point'].play()\r\n\r\n        if playerVelY < playerMaxVelY and not playerFlapped:\r\n            playerVelY += playerAccY\r\n        \r\n        if playerFlapped:\r\n            playerFlapped = False\r\n        playerHeight =  GAME_SPRITES['player'].get_height()\r\n        playery = playery + min(playerVelY, GROUNDY - playery - playerHeight)\r\n        \r\n        #move pipes to the left\r\n        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):\r\n            upperPipe['x'] += pipeVelX\r\n            lowerPipe['x'] += pipeVelX\r\n\r\n        # add  new pipe when the 1st pipe is about to cross leftmost part of screen \r\n        if 0 < upperPipes[0]['x'] < 5:\r\n          newpipe = getRandomPipe()\r\n          upperPipes.append(newpipe[0])\r\n          lowerPipes.append(newpipe[1])\r\n \r\n        # if the pipe is out of the screen , remove it \r\n        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():\r\n            upperPipes.pop(0)\r\n            lowerPipes.pop(0)\r\n        \r\n        #lets blit our sprites \r\n        SCREEN.blit(GAME_SPRITES['background'],(0,0))\r\n        for upperPipe,lowerPipe in zip(upperPipes,lowerPipes):\r\n            SCREEN.blit(GAME_SPRITES['pipe'][0],(upperPipe['x'],upperPipe['y']))\r\n            SCREEN.blit(GAME_SPRITES['pipe'][1],(lowerPipe['x'],lowerPipe['y']))\r\n\r\n        SCREEN.blit(GAME_SPRITES['base'],(basex, GROUNDY))\r\n        SCREEN.blit(GAME_SPRITES['player'],(playerx,playery))\r\n        myDigits = [int(x) for x in list(str(score))]\r\n        width = 0\r\n        for digit in myDigits:\r\n            width += GAME_SPRITES['numbers'][digit].get_width()\r\n        Xoffset = (SCREENWIDTH - width)/2\r\n\r\n        for digit in myDigits:\r\n            SCREEN.blit(GAME_SPRITES['numbers'][digit],(Xoffset,SCREENHEIGHT*0.12))\r\n            Xoffset += GAME_SPRITES['numbers'][digit].get_width()\r\n        pygame.display.update()\r\n        FPSCLOCK.tick(FPS)\r\n\r\ndef isCollide(playerx,playery,upperPipes,lowerPipes):\r\n    if playery> GROUNDY - 25  or playery<0:\r\n        GAME_SOUNDS['hit'].play()\r\n        return True  \r\n    \r\n    for pipe in upperPipes:\r\n        pipeHeight = GAME_SPRITES['pipe'][0].get_height()\r\n        if(playery< pipeHeight + pipe['y'] and abs(playery-pipe['x'])< GAME_SPRITES['pipe'][0].get_width()):\r\n           GAME_SOUNDS['hit'].play()\r\n           return True\r\n\r\n    for pipe in lowerPipes:\r\n        if (playery + GAME_SPRITES['player'].get_height() > pipe['y']) and abs(playerx - pipe['x']) < GAME_SPRITES['pipe'][0].get_width():\r\n            GAME_SOUNDS['hit'].play()\r\n            return True\r\n\r\n    return False\r\n\r\ndef getRandomPipe():\r\n    # generate position of 2 pipes(one bottom staright and one toprotated) for blitting on screen \r\n    pipeheight = GAME_SPRITES['pipe'][0].get_height()\r\n    offset = SCREENHEIGHT/3\r\n    y2 = offset + random.randrange(0,int(SCREENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2 * offset))\r\n    pipeX = SCREENWIDTH + 10\r\n    y1 = pipeheight - y2 + offset\r\n    pipe = [\r\n        {'x':pipeX, 'y':-y1},   #upper pipe\r\n        {'x':pipeX, 'y':y2}    #lower pipe\r\n\r\n        ]\r\n    return pipe    \r\n    \r\n    \r\n\r\n\r\n\r\nif __name__==\"__main__\":      #this will be main point from where game will start\r\n    \r\n    pygame.init()             #ini pygame module\r\n    FPSCLOCK = pygame.time.Clock()    \r\n    pygame.display.set_caption('Flappy Bird by Sana')\r\n    GAME_SPRITES['numbers'] = (\r\n        pygame.image.load('gallery/sprites/0.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/1.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/2.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/3.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/4.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/5.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/6.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/7.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/8.png').convert_alpha(),\r\n        pygame.image.load('gallery/sprites/9.png').convert_alpha(),\r\n    )\r\n\r\n    GAME_SPRITES['message'] =pygame.image.load('gallery/sprites/message.png').convert_alpha()\r\n    GAME_SPRITES['base'] =pygame.image.load('gallery/sprites/base.png').convert_alpha()\r\n    GAME_SPRITES['pipe'] =(pygame.transform.rotate(pygame.image.load( PIPE).convert_alpha(), 180), \r\n    pygame.image.load(PIPE).convert_alpha()\r\n    )\r\n\r\n\r\n    #game sounds\r\n\r\n    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')\r\n    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')\r\n    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')\r\n    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')\r\n    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')\r\n\r\n    GAME_SPRITES['background'] = pygame.image.load(BACKGROUND).convert()\r\n    GAME_SPRITES['player'] = pygame.image.load(PLAYER).convert_alpha()\r\n\r\n    while True:\r\n        welcomeScreen()  # shows welcome screen to user until he presses the button\r\n        mainGame()       #this is the main game func\r\n\r\n"
        }
    ]
}